"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[902],{2501:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var n=i(1527),r=i(4744);const s={sidebar_label:"Registry & Service Discovery",title:"Registry & Service Discovery"},a=void 0,c={id:"learn/fundamentals/registry",title:"Registry & Service Discovery",description:"Registry and Service Discovery are two essential components in the context of distributed systems and microservices architecture. They play crucial roles in enabling dynamic and efficient communication between services within a distributed environment.",source:"@site/docs/02-learn/01-fundamentals/10-registry.mdx",sourceDirName:"02-learn/01-fundamentals",slug:"/learn/fundamentals/registry",permalink:"/kit/zh-Hans/docs/learn/fundamentals/registry",draft:!1,unlisted:!1,editUrl:"https://github.com/go-saas/kit/tree/main/docs/docs/02-learn/01-fundamentals/10-registry.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"Registry & Service Discovery",title:"Registry & Service Discovery"},sidebar:"tutorialSidebar",previous:{title:"Background Job",permalink:"/kit/zh-Hans/docs/learn/fundamentals/background-job"},next:{title:"Data Access",permalink:"/kit/zh-Hans/docs/category/data-access"}},o={},d=[{value:"Provider",id:"provider",level:2},{value:"Etcd",id:"etcd",level:3},{value:"Dtm Integration",id:"dtm-integration",level:2},{value:"Gateway Integration",id:"gateway-integration",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Registry and Service Discovery are two essential components in the context of distributed systems and microservices architecture. They play crucial roles in enabling dynamic and efficient communication between services within a distributed environment."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Registry"}),"\nA registry is a centralized or distributed database that stores information about available services within a network or system."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Service Discovery"}),"\nService Discovery is the process by which a client or service component dynamically finds and communicates with other services within a distributed system. It involves querying a service registry or a similar mechanism to obtain information about the location and availability of required services."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"Discovery"})," interface extend ",(0,n.jsx)(t.a,{href:"https://go-kratos.dev/en/docs/component/registry",children:(0,n.jsx)(t.code,{children:"kratos.Discovery"})})," with ",(0,n.jsx)(t.code,{children:"WatchAll"})," for ",(0,n.jsx)(t.a,{href:"#Gateway%20Integration",children:"gateway integration"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:"// Discovery is service discovery.\ntype Discovery interface {\n\tregistry.Discovery\n\t// WatchAll creates a watcher to all services\n\tWatchAll(ctx context.Context) (registry.Watcher, error)\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"provider",children:"Provider"}),"\n",(0,n.jsx)(t.h3,{id:"etcd",children:"Etcd"}),"\n",(0,n.jsx)(t.p,{children:"In your configuration"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"services:\n  registry:\n    type: etcd\n    endpoint: http://etcd:2379 # your etcd endpoint\n"})}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"We recommend using etcd because APIsix and DTM are already using etcd. Using other service discovery solutions may increase operational complexity."})}),"\n",(0,n.jsxs)(t.h2,{id:"dtm-integration",children:[(0,n.jsx)(t.a,{href:"./distributed-transaction#DTM",children:"Dtm"})," Integration"]}),"\n",(0,n.jsx)(t.p,{children:"see"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/dtm-labs/dtmdriver-kratos",children:"https://github.com/dtm-labs/dtmdriver-kratos"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/dtm-labs/dtmdriver-clients",children:"https://github.com/dtm-labs/dtmdriver-clients"})}),"\n"]}),"\n",(0,n.jsxs)(t.h2,{id:"gateway-integration",children:[(0,n.jsx)(t.a,{href:"./gateway",children:"Gateway"})," Integration"]}),"\n",(0,n.jsx)(t.mermaid,{value:"flowchart TD\n    A[WatchAll] --\x3e|change notification| B(Apisix Admin Api)\n    B --\x3e C[Apisix ETCD]"}),"\n",(0,n.jsxs)(t.p,{children:["The flow is currently embedded into ",(0,n.jsx)(t.a,{href:"../../modules/sys",children:"sys module"})]})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},4744:(e,t,i)=>{i.d(t,{Z:()=>c,a:()=>a});var n=i(959);const r={},s=n.createContext(r);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);