"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7686],{1992:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(1527),a=n(4744);const o={sidebar_label:"Repository Pattern",title:"Repository Pattern"},i=void 0,s={id:"learn/fundamentals/data-access/repository",title:"Repository Pattern",description:"It provides an abstraction layer between the application's business logic and the data storage, which could be a database, an API, a file system, or any other data source. The primary goal of the Repository Pattern is to separate the concerns of data access and data manipulation from the core application logic.",source:"@site/docs/02-learn/01-fundamentals/15-data-access/01-repository.mdx",sourceDirName:"02-learn/01-fundamentals/15-data-access",slug:"/learn/fundamentals/data-access/repository",permalink:"/kit/zh-Hans/docs/learn/fundamentals/data-access/repository",draft:!1,unlisted:!1,editUrl:"https://github.com/go-saas/kit/tree/main/docs/docs/02-learn/01-fundamentals/15-data-access/01-repository.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Repository Pattern",title:"Repository Pattern"},sidebar:"tutorialSidebar",previous:{title:"Data Access",permalink:"/kit/zh-Hans/docs/category/data-access"},next:{title:"Orm",permalink:"/kit/zh-Hans/docs/learn/fundamentals/data-access/orm"}},c={},d=[{value:"Domain Declaration",id:"domain-declaration",level:2},{value:"Auditing",id:"auditing",level:3},{value:"AggregateRoot",id:"aggregateroot",level:3},{value:"Repository Interface",id:"repository-interface",level:2},{value:"Entity Change Events",id:"entity-change-events",level:2}];function l(t){const e={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"It provides an abstraction layer between the application's business logic and the data storage, which could be a database, an API, a file system, or any other data source. The primary goal of the Repository Pattern is to separate the concerns of data access and data manipulation from the core application logic."}),"\n",(0,r.jsx)(e.h2,{id:"domain-declaration",children:"Domain Declaration"}),"\n",(0,r.jsx)(e.h3,{id:"auditing",children:"Auditing"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'type AuditedModel struct {\n\tCreatedBy *string\n\tUpdatedBy *string\n\tCreatedAt time.Time `gorm:"timestamp"`\n\tUpdatedAt time.Time `gorm:"timestamp"`\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"aggregateroot",children:"AggregateRoot"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"type Agg interface {\n\tAppendEvent(events ...event.Event)\n\tConsumeEventsIfAny(ctx context.Context, fn func(ctx context.Context, events []event.Event) error) (err error)\n}\n\ntype AggRoot struct {\n\tevents []event.Event\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"AggRoot"})," implements ",(0,r.jsx)(e.code,{children:"Agg"})," interface to hold events to be committed when db transactions being committed"]}),"\n",(0,r.jsx)(e.h2,{id:"repository-interface",children:"Repository Interface"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:"type Repo[TEntity any, TKey any, TQuery any] interface {\n\tList(ctx context.Context, query TQuery) ([]*TEntity, error)\n\tListCursor(ctx context.Context, query TQuery) (*CursorResult[TEntity], error)\n\tFirst(ctx context.Context, query TQuery) (*TEntity, error)\n\tCount(ctx context.Context, query TQuery) (total int64, filtered int64, err error)\n\tGet(ctx context.Context, id TKey) (*TEntity, error)\n\tCreate(ctx context.Context, entity *TEntity) error\n\tBatchCreate(ctx context.Context, entity []*TEntity, batchSize int) error\n\tUpdate(ctx context.Context, id TKey, entity *TEntity, p query.Select) error\n\tUpsert(ctx context.Context, entity *TEntity) error\n\tDelete(ctx context.Context, id TKey) error\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:'To achieve CRUD functionality more quickly, kit provides default implementations of the above interfaces. You can swiftly implement a repository using the "embed struct" approach.'}),"\n",(0,r.jsx)(e.h2,{id:"entity-change-events",children:"Entity Change Events"}),"\n",(0,r.jsxs)(e.p,{children:["The default implementation of repository will trigger the following ",(0,r.jsx)(e.a,{href:"../events#local-eventbus",children:"local events"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:"type BeforeCreate[TEntity any] struct {\n\tEntity TEntity\n}\n\ntype AfterCreate[TEntity any] struct {\n\tEntity TEntity\n}\ntype BeforeUpdate[TEntity any] struct {\n\tEntity TEntity\n\tP      query.Select\n}\n\ntype AfterUpdate[TEntity any] struct {\n\tEntity TEntity\n}\ntype BeforeDelete[TEntity any] struct {\n\tEntity TEntity\n}\ntype AfterDelete[TEntity any] struct {\n\tEntity TEntity\n}\n"})})]})}function y(t={}){const{wrapper:e}={...(0,a.a)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}},4744:(t,e,n)=>{n.d(e,{Z:()=>s,a:()=>i});var r=n(959);const a={},o=r.createContext(a);function i(t){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:i(t.components),r.createElement(o.Provider,{value:e},t.children)}}}]);