// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package plugins

import (
	"github.com/go-kratos/kratos/v2/transport/grpc"
	"github.com/goxiaoy/go-saas-kit/pkg/api"
	"github.com/goxiaoy/go-saas-kit/pkg/authn/jwt"
	"github.com/goxiaoy/go-saas-kit/pkg/conf"
	api2 "github.com/goxiaoy/go-saas-kit/saas/api"
	"github.com/goxiaoy/go-saas-kit/saas/remote"
)

// Injectors from wire.go:

func initApp(services *conf.Services, security *conf.Security, clientName api.ClientName, arg ...grpc.ClientOption) (*App, func(), error) {
	option := NewOption()
	tokenizerConfig := jwt.NewTokenizerConfig(security)
	jwtTokenizer := jwt.NewTokenizer(tokenizerConfig)
	inMemoryTokenManager := api.NewInMemoryTokenManager(jwtTokenizer)
	grpcConn, cleanup := api2.NewGrpcConn(clientName, services, option, inMemoryTokenManager, arg...)
	tenantServiceClient := api2.NewTenantGrpcClient(grpcConn)
	tenantStore := remote.NewRemoteGrpcTenantStore(tenantServiceClient)
	app, err := newApp(tenantStore, jwtTokenizer, inMemoryTokenManager, services, clientName, option)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return app, func() {
		cleanup()
	}, nil
}
