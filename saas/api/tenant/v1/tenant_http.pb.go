// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type TenantHTTPServer interface {
	DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantReply, error)
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantReply, error)
	ListTenant(context.Context, *ListTenantRequest) (*ListTenantReply, error)
	UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantReply, error)
}

func RegisterTenantHTTPServer(s *http.Server, srv TenantHTTPServer) {
	r := s.Route("/")
	r.PATCH("/v1/saas/tenant/{tenant.id}", _Tenant_UpdateTenant0_HTTP_Handler(srv))
	r.PUT("/v1/saas/tenant/{tenant.id}", _Tenant_UpdateTenant1_HTTP_Handler(srv))
	r.DELETE("/v1/saas/tenant/{id}", _Tenant_DeleteTenant0_HTTP_Handler(srv))
	r.GET("/v1/saas/tenant/{id}", _Tenant_GetTenant0_HTTP_Handler(srv))
	r.POST("/v1/saas/tenant/list", _Tenant_ListTenant0_HTTP_Handler(srv))
	r.GET("/v1/saas/tenants", _Tenant_ListTenant1_HTTP_Handler(srv))
}

func _Tenant_UpdateTenant0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTenantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tenant.v1.Tenant/UpdateTenant")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTenant(ctx, req.(*UpdateTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_UpdateTenant1_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTenantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tenant.v1.Tenant/UpdateTenant")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTenant(ctx, req.(*UpdateTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_DeleteTenant0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tenant.v1.Tenant/DeleteTenant")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTenant(ctx, req.(*DeleteTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_GetTenant0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tenant.v1.Tenant/GetTenant")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTenant(ctx, req.(*GetTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_ListTenant0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTenantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tenant.v1.Tenant/ListTenant")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTenant(ctx, req.(*ListTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_ListTenant1_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tenant.v1.Tenant/ListTenant")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTenant(ctx, req.(*ListTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTenantReply)
		return ctx.Result(200, reply)
	}
}

type TenantHTTPClient interface {
	DeleteTenant(ctx context.Context, req *DeleteTenantRequest, opts ...http.CallOption) (rsp *DeleteTenantReply, err error)
	GetTenant(ctx context.Context, req *GetTenantRequest, opts ...http.CallOption) (rsp *GetTenantReply, err error)
	ListTenant(ctx context.Context, req *ListTenantRequest, opts ...http.CallOption) (rsp *ListTenantReply, err error)
	UpdateTenant(ctx context.Context, req *UpdateTenantRequest, opts ...http.CallOption) (rsp *UpdateTenantReply, err error)
}

type TenantHTTPClientImpl struct {
	cc *http.Client
}

func NewTenantHTTPClient(client *http.Client) TenantHTTPClient {
	return &TenantHTTPClientImpl{client}
}

func (c *TenantHTTPClientImpl) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...http.CallOption) (*DeleteTenantReply, error) {
	var out DeleteTenantReply
	pattern := "/v1/saas/tenant/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tenant.v1.Tenant/DeleteTenant"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...http.CallOption) (*GetTenantReply, error) {
	var out GetTenantReply
	pattern := "/v1/saas/tenant/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tenant.v1.Tenant/GetTenant"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) ListTenant(ctx context.Context, in *ListTenantRequest, opts ...http.CallOption) (*ListTenantReply, error) {
	var out ListTenantReply
	pattern := "/v1/saas/tenants"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tenant.v1.Tenant/ListTenant"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...http.CallOption) (*UpdateTenantReply, error) {
	var out UpdateTenantReply
	pattern := "/v1/saas/tenant/{tenant.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.tenant.v1.Tenant/UpdateTenant"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
