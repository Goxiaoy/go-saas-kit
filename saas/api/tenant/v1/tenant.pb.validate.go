// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: saas/api/tenant/v1/tenant.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTenantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return CreateTenantRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for DisplayName

	// no validation rules for Region

	return nil
}

// CreateTenantRequestValidationError is the validation error returned by
// CreateTenantRequest.Validate if the designated constraints aren't met.
type CreateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantRequestValidationError) ErrorName() string {
	return "CreateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantRequestValidationError{}

// Validate checks the field values on UpdateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTenantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTenant() == nil {
		return UpdateTenantRequestValidationError{
			field:  "Tenant",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantRequestValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateTenantRequestValidationError is the validation error returned by
// UpdateTenantRequest.Validate if the designated constraints aren't met.
type UpdateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantRequestValidationError) ErrorName() string {
	return "UpdateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantRequestValidationError{}

// Validate checks the field values on UpdateTenant with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateTenant) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return UpdateTenantValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return UpdateTenantValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for DisplayName

	return nil
}

// UpdateTenantValidationError is the validation error returned by
// UpdateTenant.Validate if the designated constraints aren't met.
type UpdateTenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantValidationError) ErrorName() string { return "UpdateTenantValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantValidationError{}

// Validate checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTenantRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteTenantRequestValidationError is the validation error returned by
// DeleteTenantRequest.Validate if the designated constraints aren't met.
type DeleteTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantRequestValidationError) ErrorName() string {
	return "DeleteTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantRequestValidationError{}

// Validate checks the field values on DeleteTenantReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteTenantReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteTenantReplyValidationError is the validation error returned by
// DeleteTenantReply.Validate if the designated constraints aren't met.
type DeleteTenantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantReplyValidationError) ErrorName() string {
	return "DeleteTenantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantReplyValidationError{}

// Validate checks the field values on GetTenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTenantRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IdOrName

	return nil
}

// GetTenantRequestValidationError is the validation error returned by
// GetTenantRequest.Validate if the designated constraints aren't met.
type GetTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantRequestValidationError) ErrorName() string { return "GetTenantRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantRequestValidationError{}

// Validate checks the field values on TenantFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TenantFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NameLike

	return nil
}

// TenantFilterValidationError is the validation error returned by
// TenantFilter.Validate if the designated constraints aren't met.
type TenantFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantFilterValidationError) ErrorName() string { return "TenantFilterValidationError" }

// Error satisfies the builtin error interface
func (e TenantFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantFilterValidationError{}

// Validate checks the field values on ListTenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTenantRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageOffset

	// no validation rules for PageSize

	// no validation rules for Search

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTenantRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTenantRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListTenantRequestValidationError is the validation error returned by
// ListTenantRequest.Validate if the designated constraints aren't met.
type ListTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantRequestValidationError) ErrorName() string {
	return "ListTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantRequestValidationError{}

// Validate checks the field values on ListTenantReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTenantReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalSize

	// no validation rules for FilterSize

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTenantReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTenantReplyValidationError is the validation error returned by
// ListTenantReply.Validate if the designated constraints aren't met.
type ListTenantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantReplyValidationError) ErrorName() string { return "ListTenantReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTenantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantReplyValidationError{}

// Validate checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Tenant) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Region

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConn() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantValidationError{
					field:  fmt.Sprintf("Conn[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFeatures() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantValidationError{
					field:  fmt.Sprintf("Features[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TenantValidationError is the validation error returned by Tenant.Validate if
// the designated constraints aren't met.
type TenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantValidationError) ErrorName() string { return "TenantValidationError" }

// Error satisfies the builtin error interface
func (e TenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantValidationError{}

// Validate checks the field values on TenantConnectionString with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TenantConnectionString) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Value

	return nil
}

// TenantConnectionStringValidationError is the validation error returned by
// TenantConnectionString.Validate if the designated constraints aren't met.
type TenantConnectionStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantConnectionStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantConnectionStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantConnectionStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantConnectionStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantConnectionStringValidationError) ErrorName() string {
	return "TenantConnectionStringValidationError"
}

// Error satisfies the builtin error interface
func (e TenantConnectionStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantConnectionString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantConnectionStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantConnectionStringValidationError{}

// Validate checks the field values on TenantFeature with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TenantFeature) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Value

	return nil
}

// TenantFeatureValidationError is the validation error returned by
// TenantFeature.Validate if the designated constraints aren't met.
type TenantFeatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantFeatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantFeatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantFeatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantFeatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantFeatureValidationError) ErrorName() string { return "TenantFeatureValidationError" }

// Error satisfies the builtin error interface
func (e TenantFeatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantFeature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantFeatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantFeatureValidationError{}
