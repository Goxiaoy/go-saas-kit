// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: blob/blob.proto

package blob

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BlobConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlobConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlobConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlobConfigMultiError, or
// nil if none found.
func (m *BlobConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *BlobConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	// no validation rules for BasePath

	// no validation rules for ReadOnly

	// no validation rules for RegexFilter

	// no validation rules for PublicUrl

	// no validation rules for InternalUrl

	if all {
		switch v := interface{}(m.GetS3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlobConfigValidationError{
					field:  "S3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlobConfigValidationError{
					field:  "S3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetS3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlobConfigValidationError{
				field:  "S3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlobConfigValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlobConfigValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlobConfigValidationError{
				field:  "Os",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BlobConfigMultiError(errors)
	}

	return nil
}

// BlobConfigMultiError is an error wrapping multiple validation errors
// returned by BlobConfig.ValidateAll() if the designated constraints aren't met.
type BlobConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlobConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlobConfigMultiError) AllErrors() []error { return m }

// BlobConfigValidationError is the validation error returned by
// BlobConfig.Validate if the designated constraints aren't met.
type BlobConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobConfigValidationError) ErrorName() string { return "BlobConfigValidationError" }

// Error satisfies the builtin error interface
func (e BlobConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlobConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobConfigValidationError{}

// Validate checks the field values on BlobProviderS3 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlobProviderS3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlobProviderS3 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlobProviderS3MultiError,
// or nil if none found.
func (m *BlobProviderS3) ValidateAll() error {
	return m.validate(true)
}

func (m *BlobProviderS3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for Key

	// no validation rules for Secret

	// no validation rules for Bucket

	if len(errors) > 0 {
		return BlobProviderS3MultiError(errors)
	}

	return nil
}

// BlobProviderS3MultiError is an error wrapping multiple validation errors
// returned by BlobProviderS3.ValidateAll() if the designated constraints
// aren't met.
type BlobProviderS3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlobProviderS3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlobProviderS3MultiError) AllErrors() []error { return m }

// BlobProviderS3ValidationError is the validation error returned by
// BlobProviderS3.Validate if the designated constraints aren't met.
type BlobProviderS3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobProviderS3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobProviderS3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobProviderS3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobProviderS3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobProviderS3ValidationError) ErrorName() string { return "BlobProviderS3ValidationError" }

// Error satisfies the builtin error interface
func (e BlobProviderS3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlobProviderS3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobProviderS3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobProviderS3ValidationError{}

// Validate checks the field values on BlobProviderOs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlobProviderOs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlobProviderOs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlobProviderOsMultiError,
// or nil if none found.
func (m *BlobProviderOs) ValidateAll() error {
	return m.validate(true)
}

func (m *BlobProviderOs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Dir != nil {

		if all {
			switch v := interface{}(m.GetDir()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BlobProviderOsValidationError{
						field:  "Dir",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BlobProviderOsValidationError{
						field:  "Dir",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDir()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BlobProviderOsValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BlobProviderOsMultiError(errors)
	}

	return nil
}

// BlobProviderOsMultiError is an error wrapping multiple validation errors
// returned by BlobProviderOs.ValidateAll() if the designated constraints
// aren't met.
type BlobProviderOsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlobProviderOsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlobProviderOsMultiError) AllErrors() []error { return m }

// BlobProviderOsValidationError is the validation error returned by
// BlobProviderOs.Validate if the designated constraints aren't met.
type BlobProviderOsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobProviderOsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobProviderOsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobProviderOsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobProviderOsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobProviderOsValidationError) ErrorName() string { return "BlobProviderOsValidationError" }

// Error satisfies the builtin error interface
func (e BlobProviderOsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlobProviderOs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobProviderOsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobProviderOsValidationError{}

// Validate checks the field values on BlobFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlobFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlobFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlobFileMultiError, or nil
// if none found.
func (m *BlobFile) ValidateAll() error {
	return m.validate(true)
}

func (m *BlobFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Mime

	// no validation rules for Size

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlobFileValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlobFileValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlobFileValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BlobFileMultiError(errors)
	}

	return nil
}

// BlobFileMultiError is an error wrapping multiple validation errors returned
// by BlobFile.ValidateAll() if the designated constraints aren't met.
type BlobFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlobFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlobFileMultiError) AllErrors() []error { return m }

// BlobFileValidationError is the validation error returned by
// BlobFile.Validate if the designated constraints aren't met.
type BlobFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobFileValidationError) ErrorName() string { return "BlobFileValidationError" }

// Error satisfies the builtin error interface
func (e BlobFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlobFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobFileValidationError{}
