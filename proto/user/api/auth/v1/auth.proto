syntax = "proto3";

package user.api.auth.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/goxiaoy/go-saas-kit/user/api/auth/v1;v1";
option java_multiple_files = true;
option java_package = "api.auth";

service Auth {
    rpc Register(RegisterAuthRequest) returns (RegisterAuthReply){
        option (google.api.http) = {
            post: "/v1/auth/register"
            body:"*"
        };
    }
    rpc Login(LoginAuthRequest) returns (LoginAuthReply){
        option (google.api.http) = {
            post: "/v1/auth/login",
            body: "*",
        };
    }
    rpc Token(TokenRequest) returns (TokenReply){
        option (google.api.http) = {
            post: "/v1/auth/token",
            body: "*",
        };
    }
    rpc Refresh(RefreshTokenAuthRequest) returns (RefreshTokenAuthReply){
        option (google.api.http) = {
            post: "/v1/auth/refresh",
            body: "*",
        };
    }
    rpc SendPasswordlessToken(PasswordlessTokenAuthRequest) returns(PasswordlessTokenAuthReply){
        option (google.api.http) = {
            post: "/v1/auth/action/passwordless",
            body: "*",
        };
    }
    rpc LoginPasswordless(LoginPasswordlessRequest) returns(LoginPasswordlessReply){
        option (google.api.http) = {
            post: "/v1/auth/login/passwordless",
            body: "*",
        };
    }
    rpc SendForgetPasswordToken(ForgetPasswordTokenRequest) returns(ForgetPasswordTokenReply){
        option (google.api.http) = {
            post: "/v1/auth/action/forget",
            body: "*",
        };
    }
    rpc ForgetPassword(ForgetPasswordRequest) returns (ForgetPasswordReply){
        option (google.api.http) = {
            post: "/v1/auth/password/forget",
            body: "*",
        };
    }

    rpc ValidatePassword(ValidatePasswordRequest) returns (ValidatePasswordReply){
        option (google.api.http) = {
            post: "/v1/auth/password/validate",
            body: "*",
        };
    }
}

message RegisterAuthRequest{

}
message RegisterAuthReply{

}

message LoginAuthRequest{
    string username =1 [(validate.rules).string.min_len = 1];
    string password =2 [(validate.rules).string.min_len = 1];
}


message TokenRequest{
    string grant_type =1 [(validate.rules).string = {in:["","password","refresh_token","authorization_code"]}];
    string username =2;
    string password =3;
    string refresh_token=4;
}

message TokenReply{
    string access_token=1;
    // Bearer
    string token_type=2;
    // Refresh token to keep login state
    string refresh_token=4;
    // Expires time in seconds
    int32 expires_in=5;
}

message LoginAuthReply{
    string access_token=1;
    // Bearer
    string token_type=2;
    // Expires time in seconds
    int32 expires=3;
    // Refresh token to keep login state
    string refresh_token=4;
    // Expires time in seconds
    int32 expires_in=5;
}

message RefreshTokenAuthRequest{
    string refresh_token=4 [(validate.rules).string.min_len = 1];
}
message RefreshTokenAuthReply{
    string access_token=1;
    // Bearer
    string token_type=2;
    // Refresh token to keep login state
    string refresh_token=4;
    // Expires time in seconds
    int32 expires_in=5;
}
message PasswordlessTokenAuthRequest{

}
message PasswordlessTokenAuthReply{

}

message LoginPasswordlessRequest{

}
message LoginPasswordlessReply{

}
message ForgetPasswordTokenRequest{

}
message ForgetPasswordTokenReply{

}
message ForgetPasswordRequest{

}
message ForgetPasswordReply{

}

message ValidatePasswordRequest{
    string password=1;
}

message ValidatePasswordReply{
    bool ok =1;
}