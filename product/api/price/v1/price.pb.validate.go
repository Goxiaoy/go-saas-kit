// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product/api/price/v1/price.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Price with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Price) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Price with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PriceMultiError, or nil if none found.
func (m *Price) ValidateAll() error {
	return m.validate(true)
}

func (m *Price) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TenantId

	// no validation rules for OwnerType

	// no validation rules for OwnerId

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscounted()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "Discounted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "Discounted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscounted()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceValidationError{
				field:  "Discounted",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiscountText

	// no validation rules for DenyMoreDiscounts

	// no validation rules for BillingSchema

	for idx, item := range m.GetCurrencyOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PriceValidationError{
						field:  fmt.Sprintf("CurrencyOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PriceValidationError{
						field:  fmt.Sprintf("CurrencyOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PriceValidationError{
					field:  fmt.Sprintf("CurrencyOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRecurring()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "Recurring",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "Recurring",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecurring()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceValidationError{
				field:  "Recurring",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTiers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PriceValidationError{
						field:  fmt.Sprintf("Tiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PriceValidationError{
						field:  fmt.Sprintf("Tiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PriceValidationError{
					field:  fmt.Sprintf("Tiers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TiersMode

	if all {
		switch v := interface{}(m.GetTransformQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "TransformQuantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceValidationError{
					field:  "TransformQuantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceValidationError{
				field:  "TransformQuantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return PriceMultiError(errors)
	}

	return nil
}

// PriceMultiError is an error wrapping multiple validation errors returned by
// Price.ValidateAll() if the designated constraints aren't met.
type PriceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceMultiError) AllErrors() []error { return m }

// PriceValidationError is the validation error returned by Price.Validate if
// the designated constraints aren't met.
type PriceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceValidationError) ErrorName() string { return "PriceValidationError" }

// Error satisfies the builtin error interface
func (e PriceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceValidationError{}

// Validate checks the field values on PriceCurrencyOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PriceCurrencyOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PriceCurrencyOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PriceCurrencyOptionMultiError, or nil if none found.
func (m *PriceCurrencyOption) ValidateAll() error {
	return m.validate(true)
}

func (m *PriceCurrencyOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrencyCode

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceCurrencyOptionValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceCurrencyOptionValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceCurrencyOptionValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscounted()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceCurrencyOptionValidationError{
					field:  "Discounted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceCurrencyOptionValidationError{
					field:  "Discounted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscounted()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceCurrencyOptionValidationError{
				field:  "Discounted",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiscountText

	// no validation rules for DenyMoreDiscounts

	for idx, item := range m.GetTiers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PriceCurrencyOptionValidationError{
						field:  fmt.Sprintf("Tiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PriceCurrencyOptionValidationError{
						field:  fmt.Sprintf("Tiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PriceCurrencyOptionValidationError{
					field:  fmt.Sprintf("Tiers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PriceCurrencyOptionMultiError(errors)
	}

	return nil
}

// PriceCurrencyOptionMultiError is an error wrapping multiple validation
// errors returned by PriceCurrencyOption.ValidateAll() if the designated
// constraints aren't met.
type PriceCurrencyOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceCurrencyOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceCurrencyOptionMultiError) AllErrors() []error { return m }

// PriceCurrencyOptionValidationError is the validation error returned by
// PriceCurrencyOption.Validate if the designated constraints aren't met.
type PriceCurrencyOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceCurrencyOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceCurrencyOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceCurrencyOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceCurrencyOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceCurrencyOptionValidationError) ErrorName() string {
	return "PriceCurrencyOptionValidationError"
}

// Error satisfies the builtin error interface
func (e PriceCurrencyOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPriceCurrencyOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceCurrencyOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceCurrencyOptionValidationError{}

// Validate checks the field values on PriceCurrencyOptionTier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PriceCurrencyOptionTier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PriceCurrencyOptionTier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PriceCurrencyOptionTierMultiError, or nil if none found.
func (m *PriceCurrencyOptionTier) ValidateAll() error {
	return m.validate(true)
}

func (m *PriceCurrencyOptionTier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FlatAmount

	// no validation rules for UnitAmount

	// no validation rules for UpTo

	if len(errors) > 0 {
		return PriceCurrencyOptionTierMultiError(errors)
	}

	return nil
}

// PriceCurrencyOptionTierMultiError is an error wrapping multiple validation
// errors returned by PriceCurrencyOptionTier.ValidateAll() if the designated
// constraints aren't met.
type PriceCurrencyOptionTierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceCurrencyOptionTierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceCurrencyOptionTierMultiError) AllErrors() []error { return m }

// PriceCurrencyOptionTierValidationError is the validation error returned by
// PriceCurrencyOptionTier.Validate if the designated constraints aren't met.
type PriceCurrencyOptionTierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceCurrencyOptionTierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceCurrencyOptionTierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceCurrencyOptionTierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceCurrencyOptionTierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceCurrencyOptionTierValidationError) ErrorName() string {
	return "PriceCurrencyOptionTierValidationError"
}

// Error satisfies the builtin error interface
func (e PriceCurrencyOptionTierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPriceCurrencyOptionTier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceCurrencyOptionTierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceCurrencyOptionTierValidationError{}

// Validate checks the field values on PriceRecurring with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PriceRecurring) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PriceRecurring with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PriceRecurringMultiError,
// or nil if none found.
func (m *PriceRecurring) ValidateAll() error {
	return m.validate(true)
}

func (m *PriceRecurring) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _PriceRecurring_Interval_InLookup[m.GetInterval()]; !ok {
		err := PriceRecurringValidationError{
			field:  "Interval",
			reason: "value must be in list [day week month year]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetIntervalCount() <= 0 {
		err := PriceRecurringValidationError{
			field:  "IntervalCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTrialPeriodDays() <= 0 {
		err := PriceRecurringValidationError{
			field:  "TrialPeriodDays",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _PriceRecurring_AggregateUsage_InLookup[m.GetAggregateUsage()]; !ok {
		err := PriceRecurringValidationError{
			field:  "AggregateUsage",
			reason: "value must be in list [last_during_period last_ever max sum]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _PriceRecurring_UsageType_InLookup[m.GetUsageType()]; !ok {
		err := PriceRecurringValidationError{
			field:  "UsageType",
			reason: "value must be in list [licensed metered]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PriceRecurringMultiError(errors)
	}

	return nil
}

// PriceRecurringMultiError is an error wrapping multiple validation errors
// returned by PriceRecurring.ValidateAll() if the designated constraints
// aren't met.
type PriceRecurringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceRecurringMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceRecurringMultiError) AllErrors() []error { return m }

// PriceRecurringValidationError is the validation error returned by
// PriceRecurring.Validate if the designated constraints aren't met.
type PriceRecurringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceRecurringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceRecurringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceRecurringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceRecurringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceRecurringValidationError) ErrorName() string { return "PriceRecurringValidationError" }

// Error satisfies the builtin error interface
func (e PriceRecurringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPriceRecurring.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceRecurringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceRecurringValidationError{}

var _PriceRecurring_Interval_InLookup = map[string]struct{}{
	"day":   {},
	"week":  {},
	"month": {},
	"year":  {},
}

var _PriceRecurring_AggregateUsage_InLookup = map[string]struct{}{
	"last_during_period": {},
	"last_ever":          {},
	"max":                {},
	"sum":                {},
}

var _PriceRecurring_UsageType_InLookup = map[string]struct{}{
	"licensed": {},
	"metered":  {},
}

// Validate checks the field values on PriceTier with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PriceTier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PriceTier with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PriceTierMultiError, or nil
// if none found.
func (m *PriceTier) ValidateAll() error {
	return m.validate(true)
}

func (m *PriceTier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFlatAmount() <= 0 {
		err := PriceTierValidationError{
			field:  "FlatAmount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUnitAmount() <= 0 {
		err := PriceTierValidationError{
			field:  "UnitAmount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpTo() <= 0 {
		err := PriceTierValidationError{
			field:  "UpTo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PriceTierMultiError(errors)
	}

	return nil
}

// PriceTierMultiError is an error wrapping multiple validation errors returned
// by PriceTier.ValidateAll() if the designated constraints aren't met.
type PriceTierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceTierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceTierMultiError) AllErrors() []error { return m }

// PriceTierValidationError is the validation error returned by
// PriceTier.Validate if the designated constraints aren't met.
type PriceTierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceTierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceTierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceTierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceTierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceTierValidationError) ErrorName() string { return "PriceTierValidationError" }

// Error satisfies the builtin error interface
func (e PriceTierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPriceTier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceTierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceTierValidationError{}

// Validate checks the field values on PriceTransformQuantity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PriceTransformQuantity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PriceTransformQuantity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PriceTransformQuantityMultiError, or nil if none found.
func (m *PriceTransformQuantity) ValidateAll() error {
	return m.validate(true)
}

func (m *PriceTransformQuantity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DivideBy

	if _, ok := _PriceTransformQuantity_Round_InLookup[m.GetRound()]; !ok {
		err := PriceTransformQuantityValidationError{
			field:  "Round",
			reason: "value must be in list [up down]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PriceTransformQuantityMultiError(errors)
	}

	return nil
}

// PriceTransformQuantityMultiError is an error wrapping multiple validation
// errors returned by PriceTransformQuantity.ValidateAll() if the designated
// constraints aren't met.
type PriceTransformQuantityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceTransformQuantityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceTransformQuantityMultiError) AllErrors() []error { return m }

// PriceTransformQuantityValidationError is the validation error returned by
// PriceTransformQuantity.Validate if the designated constraints aren't met.
type PriceTransformQuantityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceTransformQuantityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceTransformQuantityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceTransformQuantityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceTransformQuantityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceTransformQuantityValidationError) ErrorName() string {
	return "PriceTransformQuantityValidationError"
}

// Error satisfies the builtin error interface
func (e PriceTransformQuantityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPriceTransformQuantity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceTransformQuantityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceTransformQuantityValidationError{}

var _PriceTransformQuantity_Round_InLookup = map[string]struct{}{
	"up":   {},
	"down": {},
}

// Validate checks the field values on CreatePriceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePriceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePriceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePriceRequestMultiError, or nil if none found.
func (m *CreatePriceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePriceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _CreatePriceRequest_OwnerType_InLookup[m.GetOwnerType()]; !ok {
		err := CreatePriceRequestValidationError{
			field:  "OwnerType",
			reason: "value must be in list [product product_sku]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OwnerId

	// no validation rules for CurrencyCode

	// no validation rules for DefaultAmount

	// no validation rules for DiscountedAmount

	// no validation rules for DiscountText

	// no validation rules for DenyMoreDiscounts

	if _, ok := _CreatePriceRequest_BillingSchema_InLookup[m.GetBillingSchema()]; !ok {
		err := CreatePriceRequestValidationError{
			field:  "BillingSchema",
			reason: "value must be in list [per_unit tiered]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCurrencyOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePriceRequestValidationError{
						field:  fmt.Sprintf("CurrencyOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePriceRequestValidationError{
						field:  fmt.Sprintf("CurrencyOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePriceRequestValidationError{
					field:  fmt.Sprintf("CurrencyOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRecurring()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePriceRequestValidationError{
					field:  "Recurring",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePriceRequestValidationError{
					field:  "Recurring",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecurring()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePriceRequestValidationError{
				field:  "Recurring",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTiers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePriceRequestValidationError{
						field:  fmt.Sprintf("Tiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePriceRequestValidationError{
						field:  fmt.Sprintf("Tiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePriceRequestValidationError{
					field:  fmt.Sprintf("Tiers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := _CreatePriceRequest_TiersMode_InLookup[m.GetTiersMode()]; !ok {
		err := CreatePriceRequestValidationError{
			field:  "TiersMode",
			reason: "value must be in list [per_unit tiered]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTransformQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePriceRequestValidationError{
					field:  "TransformQuantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePriceRequestValidationError{
					field:  "TransformQuantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePriceRequestValidationError{
				field:  "TransformQuantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _CreatePriceRequest_Type_InLookup[m.GetType()]; !ok {
		err := CreatePriceRequestValidationError{
			field:  "Type",
			reason: "value must be in list [one_time recurring]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePriceRequestMultiError(errors)
	}

	return nil
}

// CreatePriceRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePriceRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePriceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePriceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePriceRequestMultiError) AllErrors() []error { return m }

// CreatePriceRequestValidationError is the validation error returned by
// CreatePriceRequest.Validate if the designated constraints aren't met.
type CreatePriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePriceRequestValidationError) ErrorName() string {
	return "CreatePriceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePriceRequestValidationError{}

var _CreatePriceRequest_OwnerType_InLookup = map[string]struct{}{
	"product":     {},
	"product_sku": {},
}

var _CreatePriceRequest_BillingSchema_InLookup = map[string]struct{}{
	"per_unit": {},
	"tiered":   {},
}

var _CreatePriceRequest_TiersMode_InLookup = map[string]struct{}{
	"per_unit": {},
	"tiered":   {},
}

var _CreatePriceRequest_Type_InLookup = map[string]struct{}{
	"one_time":  {},
	"recurring": {},
}

// Validate checks the field values on PriceCurrencyOptionPrams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PriceCurrencyOptionPrams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PriceCurrencyOptionPrams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PriceCurrencyOptionPramsMultiError, or nil if none found.
func (m *PriceCurrencyOptionPrams) ValidateAll() error {
	return m.validate(true)
}

func (m *PriceCurrencyOptionPrams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrencyCode

	// no validation rules for DefaultAmount

	// no validation rules for DiscountedAmount

	// no validation rules for DiscountText

	// no validation rules for DenyMoreDiscounts

	for idx, item := range m.GetTiers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PriceCurrencyOptionPramsValidationError{
						field:  fmt.Sprintf("Tiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PriceCurrencyOptionPramsValidationError{
						field:  fmt.Sprintf("Tiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PriceCurrencyOptionPramsValidationError{
					field:  fmt.Sprintf("Tiers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PriceCurrencyOptionPramsMultiError(errors)
	}

	return nil
}

// PriceCurrencyOptionPramsMultiError is an error wrapping multiple validation
// errors returned by PriceCurrencyOptionPrams.ValidateAll() if the designated
// constraints aren't met.
type PriceCurrencyOptionPramsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceCurrencyOptionPramsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceCurrencyOptionPramsMultiError) AllErrors() []error { return m }

// PriceCurrencyOptionPramsValidationError is the validation error returned by
// PriceCurrencyOptionPrams.Validate if the designated constraints aren't met.
type PriceCurrencyOptionPramsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceCurrencyOptionPramsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceCurrencyOptionPramsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceCurrencyOptionPramsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceCurrencyOptionPramsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceCurrencyOptionPramsValidationError) ErrorName() string {
	return "PriceCurrencyOptionPramsValidationError"
}

// Error satisfies the builtin error interface
func (e PriceCurrencyOptionPramsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPriceCurrencyOptionPrams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceCurrencyOptionPramsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceCurrencyOptionPramsValidationError{}

// Validate checks the field values on UpdatePriceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePriceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePriceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePriceRequestMultiError, or nil if none found.
func (m *UpdatePriceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePriceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPrice() == nil {
		err := UpdatePriceRequestValidationError{
			field:  "Price",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePriceRequestValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePriceRequestValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePriceRequestValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePriceRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePriceRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePriceRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePriceRequestMultiError(errors)
	}

	return nil
}

// UpdatePriceRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePriceRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePriceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePriceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePriceRequestMultiError) AllErrors() []error { return m }

// UpdatePriceRequestValidationError is the validation error returned by
// UpdatePriceRequest.Validate if the designated constraints aren't met.
type UpdatePriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePriceRequestValidationError) ErrorName() string {
	return "UpdatePriceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePriceRequestValidationError{}

// Validate checks the field values on UpdatePrice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdatePrice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePrice with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdatePriceMultiError, or
// nil if none found.
func (m *UpdatePrice) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePrice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if _, ok := _UpdatePrice_OwnerType_InLookup[m.GetOwnerType()]; !ok {
		err := UpdatePriceValidationError{
			field:  "OwnerType",
			reason: "value must be in list [product product_sku]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OwnerId

	// no validation rules for CurrencyCode

	// no validation rules for DefaultAmount

	// no validation rules for DiscountedAmount

	// no validation rules for DiscountText

	// no validation rules for DenyMoreDiscounts

	if _, ok := _UpdatePrice_BillingSchema_InLookup[m.GetBillingSchema()]; !ok {
		err := UpdatePriceValidationError{
			field:  "BillingSchema",
			reason: "value must be in list [per_unit tiered]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCurrencyOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePriceValidationError{
						field:  fmt.Sprintf("CurrencyOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePriceValidationError{
						field:  fmt.Sprintf("CurrencyOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePriceValidationError{
					field:  fmt.Sprintf("CurrencyOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRecurring()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePriceValidationError{
					field:  "Recurring",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePriceValidationError{
					field:  "Recurring",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecurring()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePriceValidationError{
				field:  "Recurring",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTiers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePriceValidationError{
						field:  fmt.Sprintf("Tiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePriceValidationError{
						field:  fmt.Sprintf("Tiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePriceValidationError{
					field:  fmt.Sprintf("Tiers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := _UpdatePrice_TiersMode_InLookup[m.GetTiersMode()]; !ok {
		err := UpdatePriceValidationError{
			field:  "TiersMode",
			reason: "value must be in list [per_unit tiered]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTransformQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePriceValidationError{
					field:  "TransformQuantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePriceValidationError{
					field:  "TransformQuantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePriceValidationError{
				field:  "TransformQuantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _UpdatePrice_Type_InLookup[m.GetType()]; !ok {
		err := UpdatePriceValidationError{
			field:  "Type",
			reason: "value must be in list [one_time recurring]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdatePriceMultiError(errors)
	}

	return nil
}

// UpdatePriceMultiError is an error wrapping multiple validation errors
// returned by UpdatePrice.ValidateAll() if the designated constraints aren't met.
type UpdatePriceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePriceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePriceMultiError) AllErrors() []error { return m }

// UpdatePriceValidationError is the validation error returned by
// UpdatePrice.Validate if the designated constraints aren't met.
type UpdatePriceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePriceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePriceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePriceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePriceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePriceValidationError) ErrorName() string { return "UpdatePriceValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePriceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePrice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePriceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePriceValidationError{}

var _UpdatePrice_OwnerType_InLookup = map[string]struct{}{
	"product":     {},
	"product_sku": {},
}

var _UpdatePrice_BillingSchema_InLookup = map[string]struct{}{
	"per_unit": {},
	"tiered":   {},
}

var _UpdatePrice_TiersMode_InLookup = map[string]struct{}{
	"per_unit": {},
	"tiered":   {},
}

var _UpdatePrice_Type_InLookup = map[string]struct{}{
	"one_time":  {},
	"recurring": {},
}

// Validate checks the field values on ListPriceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPriceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPriceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPriceRequestMultiError, or nil if none found.
func (m *ListPriceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPriceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageOffset

	// no validation rules for PageSize

	// no validation rules for Search

	if all {
		switch v := interface{}(m.GetFields()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPriceRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPriceRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPriceRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPriceRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPriceRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPriceRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPriceRequestMultiError(errors)
	}

	return nil
}

// ListPriceRequestMultiError is an error wrapping multiple validation errors
// returned by ListPriceRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPriceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPriceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPriceRequestMultiError) AllErrors() []error { return m }

// ListPriceRequestValidationError is the validation error returned by
// ListPriceRequest.Validate if the designated constraints aren't met.
type ListPriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPriceRequestValidationError) ErrorName() string { return "ListPriceRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPriceRequestValidationError{}

// Validate checks the field values on PriceFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PriceFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PriceFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PriceFilterMultiError, or
// nil if none found.
func (m *PriceFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *PriceFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOwnerType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceFilterValidationError{
					field:  "OwnerType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceFilterValidationError{
					field:  "OwnerType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwnerType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceFilterValidationError{
				field:  "OwnerType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwnerId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceFilterValidationError{
					field:  "OwnerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceFilterValidationError{
					field:  "OwnerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwnerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceFilterValidationError{
				field:  "OwnerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PriceFilterMultiError(errors)
	}

	return nil
}

// PriceFilterMultiError is an error wrapping multiple validation errors
// returned by PriceFilter.ValidateAll() if the designated constraints aren't met.
type PriceFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceFilterMultiError) AllErrors() []error { return m }

// PriceFilterValidationError is the validation error returned by
// PriceFilter.Validate if the designated constraints aren't met.
type PriceFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceFilterValidationError) ErrorName() string { return "PriceFilterValidationError" }

// Error satisfies the builtin error interface
func (e PriceFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPriceFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceFilterValidationError{}
