/* tslint:disable */
/* eslint-disable */
/**
 * Saas Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineObject } from '../models';
// @ts-ignore
import { InlineObject1 } from '../models';
// @ts-ignore
import { RpcStatus } from '../models';
// @ts-ignore
import { V1CreateRoleRequest } from '../models';
// @ts-ignore
import { V1GetRolePermissionResponse } from '../models';
// @ts-ignore
import { V1ListRolesRequest } from '../models';
// @ts-ignore
import { V1ListRolesResponse } from '../models';
// @ts-ignore
import { V1Role } from '../models';
// @ts-ignore
import { V1UpdateRoleRequest } from '../models';
/**
 * RoleServiceApi - axios parameter creator
 * @export
 */
export const RoleServiceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {V1CreateRoleRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceCreateRole: async (
      body: V1CreateRoleRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('roleServiceCreateRole', 'body', body);
      const localVarPath = `/v1/role`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceDeleteRole: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleServiceDeleteRole', 'id', id);
      const localVarPath = `/v1/role/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceGetRole: async (
      id: string,
      name?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleServiceGetRole', 'id', id);
      const localVarPath = `/v1/role/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter['name'] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceGetRolePermission: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleServiceGetRolePermission', 'id', id);
      const localVarPath = `/v1/role/{id}/permission`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [pageOffset]
     * @param {number} [pageSize]
     * @param {string} [search]
     * @param {Array<string>} [sort]
     * @param {string} [fields]
     * @param {Array<string>} [filterIdIn]
     * @param {Array<string>} [filterNameIn]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceListRoles: async (
      pageOffset?: number,
      pageSize?: number,
      search?: string,
      sort?: Array<string>,
      fields?: string,
      filterIdIn?: Array<string>,
      filterNameIn?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageOffset !== undefined) {
        localVarQueryParameter['pageOffset'] = pageOffset;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['pageSize'] = pageSize;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (filterIdIn) {
        localVarQueryParameter['filter.idIn'] = filterIdIn;
      }

      if (filterNameIn) {
        localVarQueryParameter['filter.nameIn'] = filterNameIn;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {V1ListRolesRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceListRoles2: async (
      body: V1ListRolesRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('roleServiceListRoles2', 'body', body);
      const localVarPath = `/v1/role/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {InlineObject1} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServicePatchRolePermission: async (
      id: string,
      body: InlineObject1,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleServicePatchRolePermission', 'id', id);
      // verify required parameter 'body' is not null or undefined
      assertParamExists('roleServicePatchRolePermission', 'body', body);
      const localVarPath = `/v1/role/{id}/permission`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} roleId
     * @param {V1UpdateRoleRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceUpdateRole: async (
      roleId: string,
      body: V1UpdateRoleRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('roleServiceUpdateRole', 'roleId', roleId);
      // verify required parameter 'body' is not null or undefined
      assertParamExists('roleServiceUpdateRole', 'body', body);
      const localVarPath = `/v1/role/{role.id}`.replace(
        `{${'role.id'}}`,
        encodeURIComponent(String(roleId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} roleId
     * @param {V1UpdateRoleRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceUpdateRole2: async (
      roleId: string,
      body: V1UpdateRoleRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('roleServiceUpdateRole2', 'roleId', roleId);
      // verify required parameter 'body' is not null or undefined
      assertParamExists('roleServiceUpdateRole2', 'body', body);
      const localVarPath = `/v1/role/{role.id}`.replace(
        `{${'role.id'}}`,
        encodeURIComponent(String(roleId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {InlineObject} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceUpdateRolePermission: async (
      id: string,
      body: InlineObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleServiceUpdateRolePermission', 'id', id);
      // verify required parameter 'body' is not null or undefined
      assertParamExists('roleServiceUpdateRolePermission', 'body', body);
      const localVarPath = `/v1/role/{id}/permission`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoleServiceApi - functional programming interface
 * @export
 */
export const RoleServiceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RoleServiceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {V1CreateRoleRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleServiceCreateRole(
      body: V1CreateRoleRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleServiceCreateRole(
        body,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleServiceDeleteRole(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleServiceDeleteRole(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleServiceGetRole(
      id: string,
      name?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleServiceGetRole(
        id,
        name,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleServiceGetRolePermission(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetRolePermissionResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleServiceGetRolePermission(
        id,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} [pageOffset]
     * @param {number} [pageSize]
     * @param {string} [search]
     * @param {Array<string>} [sort]
     * @param {string} [fields]
     * @param {Array<string>} [filterIdIn]
     * @param {Array<string>} [filterNameIn]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleServiceListRoles(
      pageOffset?: number,
      pageSize?: number,
      search?: string,
      sort?: Array<string>,
      fields?: string,
      filterIdIn?: Array<string>,
      filterNameIn?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListRolesResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleServiceListRoles(
        pageOffset,
        pageSize,
        search,
        sort,
        fields,
        filterIdIn,
        filterNameIn,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {V1ListRolesRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleServiceListRoles2(
      body: V1ListRolesRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListRolesResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleServiceListRoles2(
        body,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {InlineObject1} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleServicePatchRolePermission(
      id: string,
      body: InlineObject1,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleServicePatchRolePermission(
        id,
        body,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} roleId
     * @param {V1UpdateRoleRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleServiceUpdateRole(
      roleId: string,
      body: V1UpdateRoleRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleServiceUpdateRole(
        roleId,
        body,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} roleId
     * @param {V1UpdateRoleRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleServiceUpdateRole2(
      roleId: string,
      body: V1UpdateRoleRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleServiceUpdateRole2(
        roleId,
        body,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {InlineObject} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleServiceUpdateRolePermission(
      id: string,
      body: InlineObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleServiceUpdateRolePermission(
        id,
        body,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * RoleServiceApi - factory interface
 * @export
 */
export const RoleServiceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RoleServiceApiFp(configuration);
  return {
    /**
     *
     * @param {V1CreateRoleRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceCreateRole(body: V1CreateRoleRequest, options?: any): AxiosPromise<V1Role> {
      return localVarFp
        .roleServiceCreateRole(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceDeleteRole(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .roleServiceDeleteRole(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceGetRole(id: string, name?: string, options?: any): AxiosPromise<V1Role> {
      return localVarFp
        .roleServiceGetRole(id, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceGetRolePermission(
      id: string,
      options?: any,
    ): AxiosPromise<V1GetRolePermissionResponse> {
      return localVarFp
        .roleServiceGetRolePermission(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [pageOffset]
     * @param {number} [pageSize]
     * @param {string} [search]
     * @param {Array<string>} [sort]
     * @param {string} [fields]
     * @param {Array<string>} [filterIdIn]
     * @param {Array<string>} [filterNameIn]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceListRoles(
      pageOffset?: number,
      pageSize?: number,
      search?: string,
      sort?: Array<string>,
      fields?: string,
      filterIdIn?: Array<string>,
      filterNameIn?: Array<string>,
      options?: any,
    ): AxiosPromise<V1ListRolesResponse> {
      return localVarFp
        .roleServiceListRoles(
          pageOffset,
          pageSize,
          search,
          sort,
          fields,
          filterIdIn,
          filterNameIn,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {V1ListRolesRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceListRoles2(
      body: V1ListRolesRequest,
      options?: any,
    ): AxiosPromise<V1ListRolesResponse> {
      return localVarFp
        .roleServiceListRoles2(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {InlineObject1} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServicePatchRolePermission(
      id: string,
      body: InlineObject1,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .roleServicePatchRolePermission(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} roleId
     * @param {V1UpdateRoleRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceUpdateRole(
      roleId: string,
      body: V1UpdateRoleRequest,
      options?: any,
    ): AxiosPromise<V1Role> {
      return localVarFp
        .roleServiceUpdateRole(roleId, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} roleId
     * @param {V1UpdateRoleRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceUpdateRole2(
      roleId: string,
      body: V1UpdateRoleRequest,
      options?: any,
    ): AxiosPromise<V1Role> {
      return localVarFp
        .roleServiceUpdateRole2(roleId, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {InlineObject} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleServiceUpdateRolePermission(
      id: string,
      body: InlineObject,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .roleServiceUpdateRolePermission(id, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for roleServiceCreateRole operation in RoleServiceApi.
 * @export
 * @interface RoleServiceApiRoleServiceCreateRoleRequest
 */
export interface RoleServiceApiRoleServiceCreateRoleRequest {
  /**
   *
   * @type {V1CreateRoleRequest}
   * @memberof RoleServiceApiRoleServiceCreateRole
   */
  readonly body: V1CreateRoleRequest;
}

/**
 * Request parameters for roleServiceDeleteRole operation in RoleServiceApi.
 * @export
 * @interface RoleServiceApiRoleServiceDeleteRoleRequest
 */
export interface RoleServiceApiRoleServiceDeleteRoleRequest {
  /**
   *
   * @type {string}
   * @memberof RoleServiceApiRoleServiceDeleteRole
   */
  readonly id: string;
}

/**
 * Request parameters for roleServiceGetRole operation in RoleServiceApi.
 * @export
 * @interface RoleServiceApiRoleServiceGetRoleRequest
 */
export interface RoleServiceApiRoleServiceGetRoleRequest {
  /**
   *
   * @type {string}
   * @memberof RoleServiceApiRoleServiceGetRole
   */
  readonly id: string;

  /**
   *
   * @type {string}
   * @memberof RoleServiceApiRoleServiceGetRole
   */
  readonly name?: string;
}

/**
 * Request parameters for roleServiceGetRolePermission operation in RoleServiceApi.
 * @export
 * @interface RoleServiceApiRoleServiceGetRolePermissionRequest
 */
export interface RoleServiceApiRoleServiceGetRolePermissionRequest {
  /**
   *
   * @type {string}
   * @memberof RoleServiceApiRoleServiceGetRolePermission
   */
  readonly id: string;
}

/**
 * Request parameters for roleServiceListRoles operation in RoleServiceApi.
 * @export
 * @interface RoleServiceApiRoleServiceListRolesRequest
 */
export interface RoleServiceApiRoleServiceListRolesRequest {
  /**
   *
   * @type {number}
   * @memberof RoleServiceApiRoleServiceListRoles
   */
  readonly pageOffset?: number;

  /**
   *
   * @type {number}
   * @memberof RoleServiceApiRoleServiceListRoles
   */
  readonly pageSize?: number;

  /**
   *
   * @type {string}
   * @memberof RoleServiceApiRoleServiceListRoles
   */
  readonly search?: string;

  /**
   *
   * @type {Array<string>}
   * @memberof RoleServiceApiRoleServiceListRoles
   */
  readonly sort?: Array<string>;

  /**
   *
   * @type {string}
   * @memberof RoleServiceApiRoleServiceListRoles
   */
  readonly fields?: string;

  /**
   *
   * @type {Array<string>}
   * @memberof RoleServiceApiRoleServiceListRoles
   */
  readonly filterIdIn?: Array<string>;

  /**
   *
   * @type {Array<string>}
   * @memberof RoleServiceApiRoleServiceListRoles
   */
  readonly filterNameIn?: Array<string>;
}

/**
 * Request parameters for roleServiceListRoles2 operation in RoleServiceApi.
 * @export
 * @interface RoleServiceApiRoleServiceListRoles2Request
 */
export interface RoleServiceApiRoleServiceListRoles2Request {
  /**
   *
   * @type {V1ListRolesRequest}
   * @memberof RoleServiceApiRoleServiceListRoles2
   */
  readonly body: V1ListRolesRequest;
}

/**
 * Request parameters for roleServicePatchRolePermission operation in RoleServiceApi.
 * @export
 * @interface RoleServiceApiRoleServicePatchRolePermissionRequest
 */
export interface RoleServiceApiRoleServicePatchRolePermissionRequest {
  /**
   *
   * @type {string}
   * @memberof RoleServiceApiRoleServicePatchRolePermission
   */
  readonly id: string;

  /**
   *
   * @type {InlineObject1}
   * @memberof RoleServiceApiRoleServicePatchRolePermission
   */
  readonly body: InlineObject1;
}

/**
 * Request parameters for roleServiceUpdateRole operation in RoleServiceApi.
 * @export
 * @interface RoleServiceApiRoleServiceUpdateRoleRequest
 */
export interface RoleServiceApiRoleServiceUpdateRoleRequest {
  /**
   *
   * @type {string}
   * @memberof RoleServiceApiRoleServiceUpdateRole
   */
  readonly roleId: string;

  /**
   *
   * @type {V1UpdateRoleRequest}
   * @memberof RoleServiceApiRoleServiceUpdateRole
   */
  readonly body: V1UpdateRoleRequest;
}

/**
 * Request parameters for roleServiceUpdateRole2 operation in RoleServiceApi.
 * @export
 * @interface RoleServiceApiRoleServiceUpdateRole2Request
 */
export interface RoleServiceApiRoleServiceUpdateRole2Request {
  /**
   *
   * @type {string}
   * @memberof RoleServiceApiRoleServiceUpdateRole2
   */
  readonly roleId: string;

  /**
   *
   * @type {V1UpdateRoleRequest}
   * @memberof RoleServiceApiRoleServiceUpdateRole2
   */
  readonly body: V1UpdateRoleRequest;
}

/**
 * Request parameters for roleServiceUpdateRolePermission operation in RoleServiceApi.
 * @export
 * @interface RoleServiceApiRoleServiceUpdateRolePermissionRequest
 */
export interface RoleServiceApiRoleServiceUpdateRolePermissionRequest {
  /**
   *
   * @type {string}
   * @memberof RoleServiceApiRoleServiceUpdateRolePermission
   */
  readonly id: string;

  /**
   *
   * @type {InlineObject}
   * @memberof RoleServiceApiRoleServiceUpdateRolePermission
   */
  readonly body: InlineObject;
}

/**
 * RoleServiceApi - object-oriented interface
 * @export
 * @class RoleServiceApi
 * @extends {BaseAPI}
 */
export class RoleServiceApi extends BaseAPI {
  /**
   *
   * @param {RoleServiceApiRoleServiceCreateRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleServiceApi
   */
  public roleServiceCreateRole(
    requestParameters: RoleServiceApiRoleServiceCreateRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleServiceApiFp(this.configuration)
      .roleServiceCreateRole(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RoleServiceApiRoleServiceDeleteRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleServiceApi
   */
  public roleServiceDeleteRole(
    requestParameters: RoleServiceApiRoleServiceDeleteRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleServiceApiFp(this.configuration)
      .roleServiceDeleteRole(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RoleServiceApiRoleServiceGetRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleServiceApi
   */
  public roleServiceGetRole(
    requestParameters: RoleServiceApiRoleServiceGetRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleServiceApiFp(this.configuration)
      .roleServiceGetRole(requestParameters.id, requestParameters.name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RoleServiceApiRoleServiceGetRolePermissionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleServiceApi
   */
  public roleServiceGetRolePermission(
    requestParameters: RoleServiceApiRoleServiceGetRolePermissionRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleServiceApiFp(this.configuration)
      .roleServiceGetRolePermission(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RoleServiceApiRoleServiceListRolesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleServiceApi
   */
  public roleServiceListRoles(
    requestParameters: RoleServiceApiRoleServiceListRolesRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return RoleServiceApiFp(this.configuration)
      .roleServiceListRoles(
        requestParameters.pageOffset,
        requestParameters.pageSize,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.fields,
        requestParameters.filterIdIn,
        requestParameters.filterNameIn,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RoleServiceApiRoleServiceListRoles2Request} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleServiceApi
   */
  public roleServiceListRoles2(
    requestParameters: RoleServiceApiRoleServiceListRoles2Request,
    options?: AxiosRequestConfig,
  ) {
    return RoleServiceApiFp(this.configuration)
      .roleServiceListRoles2(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RoleServiceApiRoleServicePatchRolePermissionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleServiceApi
   */
  public roleServicePatchRolePermission(
    requestParameters: RoleServiceApiRoleServicePatchRolePermissionRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleServiceApiFp(this.configuration)
      .roleServicePatchRolePermission(requestParameters.id, requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RoleServiceApiRoleServiceUpdateRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleServiceApi
   */
  public roleServiceUpdateRole(
    requestParameters: RoleServiceApiRoleServiceUpdateRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleServiceApiFp(this.configuration)
      .roleServiceUpdateRole(requestParameters.roleId, requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RoleServiceApiRoleServiceUpdateRole2Request} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleServiceApi
   */
  public roleServiceUpdateRole2(
    requestParameters: RoleServiceApiRoleServiceUpdateRole2Request,
    options?: AxiosRequestConfig,
  ) {
    return RoleServiceApiFp(this.configuration)
      .roleServiceUpdateRole2(requestParameters.roleId, requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RoleServiceApiRoleServiceUpdateRolePermissionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleServiceApi
   */
  public roleServiceUpdateRolePermission(
    requestParameters: RoleServiceApiRoleServiceUpdateRolePermissionRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleServiceApiFp(this.configuration)
      .roleServiceUpdateRolePermission(requestParameters.id, requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
