/* tslint:disable */
/* eslint-disable */
/**
 * Saas Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RpcStatus } from '../models';
// @ts-ignore
import { V1GetCsrfTokenResponse } from '../models';
// @ts-ignore
import { V1GetLoginFormResponse } from '../models';
// @ts-ignore
import { V1LoginAuthReply } from '../models';
// @ts-ignore
import { V1LoginAuthRequest } from '../models';
// @ts-ignore
import { V1RefreshTokenAuthReply } from '../models';
// @ts-ignore
import { V1RefreshTokenAuthRequest } from '../models';
// @ts-ignore
import { V1TokenReply } from '../models';
// @ts-ignore
import { V1TokenRequest } from '../models';
// @ts-ignore
import { V1ValidatePasswordReply } from '../models';
// @ts-ignore
import { V1ValidatePasswordRequest } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authForgetPassword: async (
      body: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('authForgetPassword', 'body', body);
      const localVarPath = `/v1/auth/password/forget`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetCsrfToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth/csrf`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [redirect] redirect url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetLoginForm: async (
      redirect?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (redirect !== undefined) {
        localVarQueryParameter['redirect'] = redirect;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {V1LoginAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogin: async (
      body: V1LoginAuthRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('authLogin', 'body', body);
      const localVarPath = `/v1/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPasswordless: async (
      body: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('authLoginPasswordless', 'body', body);
      const localVarPath = `/v1/auth/login/passwordless`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {V1RefreshTokenAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRefresh: async (
      body: V1RefreshTokenAuthRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('authRefresh', 'body', body);
      const localVarPath = `/v1/auth/refresh`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegister: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('authRegister', 'body', body);
      const localVarPath = `/v1/auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSendForgetPasswordToken: async (
      body: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('authSendForgetPasswordToken', 'body', body);
      const localVarPath = `/v1/auth/action/forget`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSendPasswordlessToken: async (
      body: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('authSendPasswordlessToken', 'body', body);
      const localVarPath = `/v1/auth/action/passwordless`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {V1TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authToken: async (
      body: V1TokenRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('authToken', 'body', body);
      const localVarPath = `/v1/auth/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {V1ValidatePasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authValidatePassword: async (
      body: V1ValidatePasswordRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('authValidatePassword', 'body', body);
      const localVarPath = `/v1/auth/password/validate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authForgetPassword(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authForgetPassword(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authGetCsrfToken(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetCsrfTokenResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authGetCsrfToken(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} [redirect] redirect url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authGetLoginForm(
      redirect?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetLoginFormResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authGetLoginForm(redirect, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {V1LoginAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLogin(
      body: V1LoginAuthRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1LoginAuthReply>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLogin(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLoginPasswordless(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPasswordless(
        body,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {V1RefreshTokenAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authRefresh(
      body: V1RefreshTokenAuthRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RefreshTokenAuthReply>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authRefresh(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authRegister(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authRegister(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authSendForgetPasswordToken(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authSendForgetPasswordToken(
        body,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authSendPasswordlessToken(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authSendPasswordlessToken(
        body,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {V1TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authToken(
      body: V1TokenRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TokenReply>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authToken(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {V1ValidatePasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authValidatePassword(
      body: V1ValidatePasswordRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ValidatePasswordReply>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authValidatePassword(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authForgetPassword(body: object, options?: any): AxiosPromise<object> {
      return localVarFp
        .authForgetPassword(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetCsrfToken(options?: any): AxiosPromise<V1GetCsrfTokenResponse> {
      return localVarFp.authGetCsrfToken(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [redirect] redirect url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetLoginForm(redirect?: string, options?: any): AxiosPromise<V1GetLoginFormResponse> {
      return localVarFp
        .authGetLoginForm(redirect, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {V1LoginAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogin(body: V1LoginAuthRequest, options?: any): AxiosPromise<V1LoginAuthReply> {
      return localVarFp.authLogin(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPasswordless(body: object, options?: any): AxiosPromise<object> {
      return localVarFp
        .authLoginPasswordless(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {V1RefreshTokenAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRefresh(
      body: V1RefreshTokenAuthRequest,
      options?: any,
    ): AxiosPromise<V1RefreshTokenAuthReply> {
      return localVarFp.authRefresh(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegister(body: object, options?: any): AxiosPromise<object> {
      return localVarFp.authRegister(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSendForgetPasswordToken(body: object, options?: any): AxiosPromise<object> {
      return localVarFp
        .authSendForgetPasswordToken(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSendPasswordlessToken(body: object, options?: any): AxiosPromise<object> {
      return localVarFp
        .authSendPasswordlessToken(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {V1TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authToken(body: V1TokenRequest, options?: any): AxiosPromise<V1TokenReply> {
      return localVarFp.authToken(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {V1ValidatePasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authValidatePassword(
      body: V1ValidatePasswordRequest,
      options?: any,
    ): AxiosPromise<V1ValidatePasswordReply> {
      return localVarFp
        .authValidatePassword(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for authForgetPassword operation in AuthApi.
 * @export
 * @interface AuthApiAuthForgetPasswordRequest
 */
export interface AuthApiAuthForgetPasswordRequest {
  /**
   *
   * @type {object}
   * @memberof AuthApiAuthForgetPassword
   */
  readonly body: object;
}

/**
 * Request parameters for authGetLoginForm operation in AuthApi.
 * @export
 * @interface AuthApiAuthGetLoginFormRequest
 */
export interface AuthApiAuthGetLoginFormRequest {
  /**
   * redirect url.
   * @type {string}
   * @memberof AuthApiAuthGetLoginForm
   */
  readonly redirect?: string;
}

/**
 * Request parameters for authLogin operation in AuthApi.
 * @export
 * @interface AuthApiAuthLoginRequest
 */
export interface AuthApiAuthLoginRequest {
  /**
   *
   * @type {V1LoginAuthRequest}
   * @memberof AuthApiAuthLogin
   */
  readonly body: V1LoginAuthRequest;
}

/**
 * Request parameters for authLoginPasswordless operation in AuthApi.
 * @export
 * @interface AuthApiAuthLoginPasswordlessRequest
 */
export interface AuthApiAuthLoginPasswordlessRequest {
  /**
   *
   * @type {object}
   * @memberof AuthApiAuthLoginPasswordless
   */
  readonly body: object;
}

/**
 * Request parameters for authRefresh operation in AuthApi.
 * @export
 * @interface AuthApiAuthRefreshRequest
 */
export interface AuthApiAuthRefreshRequest {
  /**
   *
   * @type {V1RefreshTokenAuthRequest}
   * @memberof AuthApiAuthRefresh
   */
  readonly body: V1RefreshTokenAuthRequest;
}

/**
 * Request parameters for authRegister operation in AuthApi.
 * @export
 * @interface AuthApiAuthRegisterRequest
 */
export interface AuthApiAuthRegisterRequest {
  /**
   *
   * @type {object}
   * @memberof AuthApiAuthRegister
   */
  readonly body: object;
}

/**
 * Request parameters for authSendForgetPasswordToken operation in AuthApi.
 * @export
 * @interface AuthApiAuthSendForgetPasswordTokenRequest
 */
export interface AuthApiAuthSendForgetPasswordTokenRequest {
  /**
   *
   * @type {object}
   * @memberof AuthApiAuthSendForgetPasswordToken
   */
  readonly body: object;
}

/**
 * Request parameters for authSendPasswordlessToken operation in AuthApi.
 * @export
 * @interface AuthApiAuthSendPasswordlessTokenRequest
 */
export interface AuthApiAuthSendPasswordlessTokenRequest {
  /**
   *
   * @type {object}
   * @memberof AuthApiAuthSendPasswordlessToken
   */
  readonly body: object;
}

/**
 * Request parameters for authToken operation in AuthApi.
 * @export
 * @interface AuthApiAuthTokenRequest
 */
export interface AuthApiAuthTokenRequest {
  /**
   *
   * @type {V1TokenRequest}
   * @memberof AuthApiAuthToken
   */
  readonly body: V1TokenRequest;
}

/**
 * Request parameters for authValidatePassword operation in AuthApi.
 * @export
 * @interface AuthApiAuthValidatePasswordRequest
 */
export interface AuthApiAuthValidatePasswordRequest {
  /**
   *
   * @type {V1ValidatePasswordRequest}
   * @memberof AuthApiAuthValidatePassword
   */
  readonly body: V1ValidatePasswordRequest;
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @param {AuthApiAuthForgetPasswordRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authForgetPassword(
    requestParameters: AuthApiAuthForgetPasswordRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authForgetPassword(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authGetCsrfToken(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authGetCsrfToken(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthApiAuthGetLoginFormRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authGetLoginForm(
    requestParameters: AuthApiAuthGetLoginFormRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authGetLoginForm(requestParameters.redirect, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthApiAuthLoginRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authLogin(requestParameters: AuthApiAuthLoginRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authLogin(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthApiAuthLoginPasswordlessRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authLoginPasswordless(
    requestParameters: AuthApiAuthLoginPasswordlessRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authLoginPasswordless(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthApiAuthRefreshRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authRefresh(requestParameters: AuthApiAuthRefreshRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authRefresh(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthApiAuthRegisterRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authRegister(requestParameters: AuthApiAuthRegisterRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authRegister(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthApiAuthSendForgetPasswordTokenRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authSendForgetPasswordToken(
    requestParameters: AuthApiAuthSendForgetPasswordTokenRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authSendForgetPasswordToken(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthApiAuthSendPasswordlessTokenRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authSendPasswordlessToken(
    requestParameters: AuthApiAuthSendPasswordlessTokenRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authSendPasswordlessToken(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthApiAuthTokenRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authToken(requestParameters: AuthApiAuthTokenRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authToken(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthApiAuthValidatePasswordRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authValidatePassword(
    requestParameters: AuthApiAuthValidatePasswordRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authValidatePassword(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
