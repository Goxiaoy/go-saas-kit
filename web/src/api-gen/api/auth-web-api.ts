/* tslint:disable */
/* eslint-disable */
/**
 * Saas Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RpcStatus } from '../models';
// @ts-ignore
import { V1GetLoginFormResponse } from '../models';
// @ts-ignore
import { V1LoginAuthReply } from '../models';
// @ts-ignore
import { V1LoginAuthRequest } from '../models';
/**
 * AuthWebApi - axios parameter creator
 * @export
 */
export const AuthWebApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} [redirect] redirect url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authWebGetWebLoginForm: async (
      redirect?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth/web/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (redirect !== undefined) {
        localVarQueryParameter['redirect'] = redirect;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {V1LoginAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authWebWebLogin: async (
      body: V1LoginAuthRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('authWebWebLogin', 'body', body);
      const localVarPath = `/v1/auth/web/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthWebApi - functional programming interface
 * @export
 */
export const AuthWebApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthWebApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [redirect] redirect url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authWebGetWebLoginForm(
      redirect?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetLoginFormResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authWebGetWebLoginForm(
        redirect,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {V1LoginAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authWebWebLogin(
      body: V1LoginAuthRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1LoginAuthReply>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authWebWebLogin(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AuthWebApi - factory interface
 * @export
 */
export const AuthWebApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthWebApiFp(configuration);
  return {
    /**
     *
     * @param {string} [redirect] redirect url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authWebGetWebLoginForm(redirect?: string, options?: any): AxiosPromise<V1GetLoginFormResponse> {
      return localVarFp
        .authWebGetWebLoginForm(redirect, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {V1LoginAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authWebWebLogin(body: V1LoginAuthRequest, options?: any): AxiosPromise<V1LoginAuthReply> {
      return localVarFp.authWebWebLogin(body, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for authWebGetWebLoginForm operation in AuthWebApi.
 * @export
 * @interface AuthWebApiAuthWebGetWebLoginFormRequest
 */
export interface AuthWebApiAuthWebGetWebLoginFormRequest {
  /**
   * redirect url.
   * @type {string}
   * @memberof AuthWebApiAuthWebGetWebLoginForm
   */
  readonly redirect?: string;
}

/**
 * Request parameters for authWebWebLogin operation in AuthWebApi.
 * @export
 * @interface AuthWebApiAuthWebWebLoginRequest
 */
export interface AuthWebApiAuthWebWebLoginRequest {
  /**
   *
   * @type {V1LoginAuthRequest}
   * @memberof AuthWebApiAuthWebWebLogin
   */
  readonly body: V1LoginAuthRequest;
}

/**
 * AuthWebApi - object-oriented interface
 * @export
 * @class AuthWebApi
 * @extends {BaseAPI}
 */
export class AuthWebApi extends BaseAPI {
  /**
   *
   * @param {AuthWebApiAuthWebGetWebLoginFormRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthWebApi
   */
  public authWebGetWebLoginForm(
    requestParameters: AuthWebApiAuthWebGetWebLoginFormRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return AuthWebApiFp(this.configuration)
      .authWebGetWebLoginForm(requestParameters.redirect, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthWebApiAuthWebWebLoginRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthWebApi
   */
  public authWebWebLogin(
    requestParameters: AuthWebApiAuthWebWebLoginRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthWebApiFp(this.configuration)
      .authWebWebLogin(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
