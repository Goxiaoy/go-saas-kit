// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/transport/grpc"
	"github.com/goxiaoy/go-eventbus"
	server2 "github.com/goxiaoy/go-saas-kit/examples/monolithic/private/server"
	"github.com/goxiaoy/go-saas-kit/pkg/api"
	"github.com/goxiaoy/go-saas-kit/pkg/authn/jwt"
	"github.com/goxiaoy/go-saas-kit/pkg/authz/authz"
	"github.com/goxiaoy/go-saas-kit/pkg/authz/casbin"
	"github.com/goxiaoy/go-saas-kit/pkg/conf"
	"github.com/goxiaoy/go-saas-kit/pkg/dal"
	"github.com/goxiaoy/go-saas-kit/pkg/gorm"
	"github.com/goxiaoy/go-saas-kit/pkg/redis"
	"github.com/goxiaoy/go-saas-kit/pkg/server"
	"github.com/goxiaoy/go-saas-kit/pkg/uow"
	biz2 "github.com/goxiaoy/go-saas-kit/saas/private/biz"
	conf2 "github.com/goxiaoy/go-saas-kit/saas/private/conf"
	"github.com/goxiaoy/go-saas-kit/saas/private/data"
	server5 "github.com/goxiaoy/go-saas-kit/saas/private/server"
	service2 "github.com/goxiaoy/go-saas-kit/saas/private/service"
	biz3 "github.com/goxiaoy/go-saas-kit/sys/private/biz"
	data3 "github.com/goxiaoy/go-saas-kit/sys/private/data"
	server4 "github.com/goxiaoy/go-saas-kit/sys/private/server"
	service3 "github.com/goxiaoy/go-saas-kit/sys/private/service"
	api2 "github.com/goxiaoy/go-saas-kit/user/api"
	"github.com/goxiaoy/go-saas-kit/user/private/biz"
	conf3 "github.com/goxiaoy/go-saas-kit/user/private/conf"
	data2 "github.com/goxiaoy/go-saas-kit/user/private/data"
	server3 "github.com/goxiaoy/go-saas-kit/user/private/server"
	"github.com/goxiaoy/go-saas-kit/user/private/service"
	"github.com/goxiaoy/go-saas-kit/user/private/service/http"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(services *conf.Services, security *conf.Security, confData *conf.Data, saasConf *conf2.SaasConf, userConf *conf3.UserConf, logger log.Logger, appConfig *conf.AppConfig, arg ...grpc.ClientOption) (*kratos.App, func(), error) {
	tokenizerConfig := jwt.NewTokenizerConfig(security)
	tokenizer := jwt.NewTokenizer(tokenizerConfig)
	connName := _wireConnNameValue
	config := dal.NewGormConfig(confData, connName)
	uowConfig := _wireConfigValue
	dbOpener, cleanup := gorm.NewDbOpener()
	manager := uow.NewUowManager(config, uowConfig, dbOpener)
	webMultiTenancyOption := server.NewWebMultiTenancyOption(appConfig)
	option := api.NewDefaultOption(logger)
	eventBus := _wireEventBusValue
	constConnStrResolver := dal.NewConstantConnStrResolver(confData)
	constDbProvider := dal.NewConstDbProvider(constConnStrResolver, config, dbOpener)
	dataData, cleanup2, err := data.NewData(confData, constDbProvider, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	tenantRepo := data.NewTenantRepo(eventBus, dataData)
	tenantStore := data.NewTenantStore(tenantRepo)
	decodeRequestFunc := _wireDecodeRequestFuncValue
	encodeResponseFunc := _wireEncodeResponseFuncValue
	encodeErrorFunc := _wireEncodeErrorFuncValue
	connStrResolver := dal.NewConnStrResolver(confData, tenantStore)
	dbProvider := gorm.NewDbProvider(connStrResolver, config, dbOpener)
	data4, cleanup3, err := data2.NewData(confData, dbProvider, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userRepo := data2.NewUserRepo(data4)
	passwordHasher := biz.NewPasswordHasher()
	userValidator := biz.NewUserValidator()
	passwordValidator := biz.NewPasswordValidator(userConf)
	lookupNormalizer := biz.NewLookupNormalizer()
	userTokenRepo := data2.NewUserTokenRepo(data4)
	refreshTokenRepo := data2.NewRefreshTokenRepo(data4)
	userTenantRepo := data2.NewUserTenantRepo(data4)
	client := dal.NewRedis(confData, connName)
	emailTokenProvider := biz.NewEmailTokenProvider(client)
	phoneTokenProvider := biz.NewPhoneTokenProvider(client)
	cache := redis.NewCache(client)
	twoStepTokenProvider := biz.NewTwoStepTokenProvider(cache)
	userManager := biz.NewUserManager(userConf, userRepo, passwordHasher, userValidator, passwordValidator, lookupNormalizer, userTokenRepo, refreshTokenRepo, userTenantRepo, emailTokenProvider, phoneTokenProvider, twoStepTokenProvider, logger)
	roleRepo := data2.NewRoleRepo(data4, eventBus)
	roleManager := biz.NewRoleManager(roleRepo, lookupNormalizer)
	enforcerProvider, err := data2.NewEnforcerProvider(logger, dbProvider)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	permissionService := casbin.NewPermissionService(enforcerProvider)
	userRoleContributor := service.NewUserRoleContributor(userRepo)
	authzOption := server2.NewAuthorizationOption(userRoleContributor)
	subjectResolverImpl := authz.NewSubjectResolver(authzOption)
	defaultAuthorizationService := authz.NewDefaultAuthorizationService(permissionService, subjectResolverImpl, logger)
	factory := dal.NewBlobFactory(confData)
	trustedContextValidator := api.NewClientTrustedContextValidator()
	userService := service.NewUserService(userManager, roleManager, defaultAuthorizationService, factory, trustedContextValidator, logger)
	userServiceServer := service.NewUserServiceServer(userService)
	userTenantContributor := api2.NewUserTenantContributor(userServiceServer)
	lazyClient := dal.NewEmailer(confData)
	emailSender := biz.NewEmailSender(lazyClient, confData)
	authService := service.NewAuthService(userManager, roleManager, tokenizer, tokenizerConfig, passwordValidator, refreshTokenRepo, emailSender, security, defaultAuthorizationService, trustedContextValidator, logger)
	authServer := service.NewAuthServiceServer(authService)
	refreshTokenProvider := api2.NewRefreshProvider(authServer, logger)
	connStrGenerator := biz2.NewConfigConnStrGenerator(saasConf)
	sender, cleanup4, err := dal.NewEventSender(confData, logger, connName)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tenantUseCase := biz2.NewTenantUserCase(tenantRepo, connStrGenerator, sender)
	tenantService := service2.NewTenantService(tenantUseCase, defaultAuthorizationService, trustedContextValidator, factory, appConfig)
	tenantServiceServer := service2.NewTenantServiceServer(tenantService)
	userSettingRepo := data2.NewUserSettingRepo(data4, eventBus)
	userAddressRepo := data2.NewUserAddrRepo(data4, eventBus)
	accountService := service.NewAccountService(userManager, factory, tenantServiceServer, userSettingRepo, userAddressRepo, lookupNormalizer)
	roleService := service.NewRoleServiceService(roleManager, defaultAuthorizationService, permissionService)
	servicePermissionService := service.NewPermissionService(defaultAuthorizationService, permissionService, subjectResolverImpl, trustedContextValidator)
	signInManager := biz.NewSignInManager(userManager, security)
	apiClient := server3.NewHydra(security)
	auth := http.NewAuth(decodeRequestFunc, userManager, logger, signInManager, apiClient)
	httpServerRegister := service.NewHttpServerRegister(userService, encodeResponseFunc, encodeErrorFunc, accountService, authService, roleService, servicePermissionService, auth, confData, factory)
	menuRepo := data3.NewMenuRepo(dbProvider, eventBus)
	menuService := service3.NewMenuService(defaultAuthorizationService, menuRepo, logger)
	serviceHttpServerRegister := service3.NewHttpServerRegister(menuService, factory, confData)
	httpServerRegister2 := service2.NewHttpServerRegister(tenantService, factory, confData)
	serverHttpServerRegister := server2.NewHttpServiceRegister(httpServerRegister, serviceHttpServerRegister, httpServerRegister2)
	httpServer := server2.NewHTTPServer(services, security, tokenizer, manager, webMultiTenancyOption, option, tenantStore, decodeRequestFunc, encodeResponseFunc, encodeErrorFunc, logger, userTenantContributor, trustedContextValidator, refreshTokenProvider, serverHttpServerRegister)
	grpcServerRegister := service.NewGrpcServerRegister(userService, accountService, authService, roleService, servicePermissionService)
	serviceGrpcServerRegister := service3.NewGrpcServerRegister(menuService)
	grpcServerRegister2 := service2.NewGrpcServerRegister(tenantService)
	serverGrpcServerRegister := server2.NewGrpcServiceRegister(grpcServerRegister, serviceGrpcServerRegister, grpcServerRegister2)
	grpcServer := server2.NewGRPCServer(services, tokenizer, tenantStore, manager, webMultiTenancyOption, option, logger, trustedContextValidator, userTenantContributor, serverGrpcServerRegister)
	migrate := data2.NewMigrate(data4)
	roleSeed := biz.NewRoleSeed(roleManager, permissionService)
	userSeed := biz.NewUserSeed(userManager, roleManager)
	permissionSeeder := biz.NewPermissionSeeder(permissionService, permissionService, roleManager)
	seeding := server3.NewSeeding(manager, migrate, roleSeed, userSeed, permissionSeeder)
	data5, cleanup5, err := data3.NewData(confData, dbProvider, logger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dataMigrate := data3.NewMigrate(data5)
	menuSeed := biz3.NewMenuSeed(dbProvider, menuRepo)
	serverSeeding := server4.NewSeeding(manager, dataMigrate, menuSeed)
	migrate2 := data.NewMigrate(dataData)
	seeding2 := server5.NewSeeding(manager, migrate2)
	seeder := server2.NewSeeder(seeding, serverSeeding, seeding2)
	tenantSeedEventHandler := biz.NewTenantSeedEventHandler(seeder, sender)
	userEventHandler := biz.NewRemoteEventHandler(logger, manager, tenantSeedEventHandler)
	tenantReadyEventHandler := biz2.NewTenantReadyEventHandler(tenantUseCase)
	saasEventHandler := biz2.NewRemoteEventHandler(logger, manager, tenantReadyEventHandler)
	handler := server2.NewEventHandler(userEventHandler, saasEventHandler)
	receiver, cleanup6, err := dal.NewRemoteEventReceiver(confData, logger, handler, connName)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	eventHook, cleanup7, err := biz2.NewLocalEventHook(sender)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app := newApp(logger, httpServer, grpcServer, seeder, receiver, eventHook)
	return app, func() {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireConnNameValue           = dal.ConnName("default")
	_wireConfigValue             = dal.UowCfg
	_wireEventBusValue           = eventbus.Default
	_wireDecodeRequestFuncValue  = server.ReqDecode
	_wireEncodeResponseFuncValue = server.ResEncoder
	_wireEncodeErrorFuncValue    = server.ErrEncoder
)
