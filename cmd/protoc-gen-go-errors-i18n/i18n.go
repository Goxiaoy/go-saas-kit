package main

import (
	"github.com/go-kratos/kratos/v2/errors"
	"github.com/go-saas/kit/pkg/localize"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

const (
	errorsPackage = protogen.GoImportPath("github.com/go-kratos/kratos/v2/errors")
	i18nPackage   = protogen.GoImportPath("github.com/go-saas/go-i18n/v2/i18n")
)

// generateFile generates a _errors.pb.go file containing kratos errors definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Enums) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_errors_i18n.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-errors-i18n. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.QualifiedGoIdent(i18nPackage.Ident(""))
	generateFileContent(gen, file, g)
	return g
}

// generateFileContent generates the kratos errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Enums) == 0 {
		return
	}

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the kratos package it is being compiled against.")
	g.P("const _ = ", errorsPackage.Ident("SupportPackageIsVersion1"))
	g.P()
	g.P()
	index := 0
	for _, enum := range file.Enums {
		skip := genErrorsLocalize(gen, file, g, enum)
		if !skip {
			index++
		}
	}
	// If all enums do not contain 'errors.code', the current file is skipped
	if index == 0 {
		g.Skip()
	}
}

func genErrorsLocalize(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, enum *protogen.Enum) bool {
	defaultCode := proto.GetExtension(enum.Desc.Options(), errors.E_DefaultCode)
	code := 0
	if ok := defaultCode.(int32); ok != 0 {
		code = int(ok)
	}

	var ew errorWrapper
	for _, v := range enum.Values {
		skipLocale := proto.GetExtension(v.Desc.Options(), localize.E_SkipLocale)
		if skip, ok := skipLocale.(bool); ok && skip {
			continue
		}
		enumCode := code
		eCode := proto.GetExtension(v.Desc.Options(), errors.E_Code)
		if ok := eCode.(int32); ok != 0 {
			enumCode = int(ok)
		}

		if enumCode == 0 {
			continue
		}
		camelValue := case2Camel(string(v.Desc.Name()))
		err := &errorInfo{
			Name:       string(enum.Desc.Name()),
			Value:      string(v.Desc.Name()),
			CamelValue: camelValue,
			HTTPCode:   enumCode,
		}
		key := camelValue
		msgKey := proto.GetExtension(v.Desc.Options(), localize.E_MsgKey)
		if k := msgKey.(string); k != "" {
			key = k
		}
		err.MsgKey = key
		ew.Errors = append(ew.Errors, err)
	}
	if len(ew.Errors) == 0 {
		return true
	}
	g.P(ew.execute())
	return false
}

func case2Camel(name string) string {
	if !strings.Contains(name, "_") {
		upperName := strings.ToUpper(name)
		if upperName == name {
			name = strings.ToLower(name)
		}
		return strings.Title(name)
	}
	name = strings.ToLower(name)
	name = strings.Replace(name, "_", " ", -1)
	name = strings.Title(name)
	return strings.Replace(name, " ", "", -1)
}
