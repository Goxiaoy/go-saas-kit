// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: user/api/auth/v1/web.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthWebClient is the client API for AuthWeb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthWebClient interface {
	GetWebLoginForm(ctx context.Context, in *GetLoginFormRequest, opts ...grpc.CallOption) (*GetLoginFormResponse, error)
	WebLogin(ctx context.Context, in *LoginAuthRequest, opts ...grpc.CallOption) (*LoginAuthReply, error)
	WebLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type authWebClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthWebClient(cc grpc.ClientConnInterface) AuthWebClient {
	return &authWebClient{cc}
}

func (c *authWebClient) GetWebLoginForm(ctx context.Context, in *GetLoginFormRequest, opts ...grpc.CallOption) (*GetLoginFormResponse, error) {
	out := new(GetLoginFormResponse)
	err := c.cc.Invoke(ctx, "/user.api.auth.v1.AuthWeb/GetWebLoginForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authWebClient) WebLogin(ctx context.Context, in *LoginAuthRequest, opts ...grpc.CallOption) (*LoginAuthReply, error) {
	out := new(LoginAuthReply)
	err := c.cc.Invoke(ctx, "/user.api.auth.v1.AuthWeb/WebLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authWebClient) WebLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/user.api.auth.v1.AuthWeb/WebLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthWebServer is the server API for AuthWeb service.
// All implementations must embed UnimplementedAuthWebServer
// for forward compatibility
type AuthWebServer interface {
	GetWebLoginForm(context.Context, *GetLoginFormRequest) (*GetLoginFormResponse, error)
	WebLogin(context.Context, *LoginAuthRequest) (*LoginAuthReply, error)
	WebLogout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	mustEmbedUnimplementedAuthWebServer()
}

// UnimplementedAuthWebServer must be embedded to have forward compatible implementations.
type UnimplementedAuthWebServer struct {
}

func (UnimplementedAuthWebServer) GetWebLoginForm(context.Context, *GetLoginFormRequest) (*GetLoginFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebLoginForm not implemented")
}
func (UnimplementedAuthWebServer) WebLogin(context.Context, *LoginAuthRequest) (*LoginAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebLogin not implemented")
}
func (UnimplementedAuthWebServer) WebLogout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebLogout not implemented")
}
func (UnimplementedAuthWebServer) mustEmbedUnimplementedAuthWebServer() {}

// UnsafeAuthWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthWebServer will
// result in compilation errors.
type UnsafeAuthWebServer interface {
	mustEmbedUnimplementedAuthWebServer()
}

func RegisterAuthWebServer(s grpc.ServiceRegistrar, srv AuthWebServer) {
	s.RegisterService(&AuthWeb_ServiceDesc, srv)
}

func _AuthWeb_GetWebLoginForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthWebServer).GetWebLoginForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.auth.v1.AuthWeb/GetWebLoginForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthWebServer).GetWebLoginForm(ctx, req.(*GetLoginFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthWeb_WebLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthWebServer).WebLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.auth.v1.AuthWeb/WebLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthWebServer).WebLogin(ctx, req.(*LoginAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthWeb_WebLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthWebServer).WebLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.auth.v1.AuthWeb/WebLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthWebServer).WebLogout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthWeb_ServiceDesc is the grpc.ServiceDesc for AuthWeb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthWeb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.api.auth.v1.AuthWeb",
	HandlerType: (*AuthWebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWebLoginForm",
			Handler:    _AuthWeb_GetWebLoginForm_Handler,
		},
		{
			MethodName: "WebLogin",
			Handler:    _AuthWeb_WebLogin_Handler,
		},
		{
			MethodName: "WebLogout",
			Handler:    _AuthWeb_WebLogout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/api/auth/v1/web.proto",
}
