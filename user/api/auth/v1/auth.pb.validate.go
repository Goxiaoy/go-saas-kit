// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/api/auth/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on RegisterAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterAuthRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RegisterAuthRequestValidationError is the validation error returned by
// RegisterAuthRequest.Validate if the designated constraints aren't met.
type RegisterAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAuthRequestValidationError) ErrorName() string {
	return "RegisterAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAuthRequestValidationError{}

// Validate checks the field values on RegisterAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegisterAuthReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RegisterAuthReplyValidationError is the validation error returned by
// RegisterAuthReply.Validate if the designated constraints aren't met.
type RegisterAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAuthReplyValidationError) ErrorName() string {
	return "RegisterAuthReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAuthReplyValidationError{}

// Validate checks the field values on LoginAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LoginAuthRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		return LoginAuthRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		return LoginAuthRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// LoginAuthRequestValidationError is the validation error returned by
// LoginAuthRequest.Validate if the designated constraints aren't met.
type LoginAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginAuthRequestValidationError) ErrorName() string { return "LoginAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginAuthRequestValidationError{}

// Validate checks the field values on LoginAuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoginAuthReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for TokenType

	// no validation rules for Expires

	// no validation rules for RefreshToken

	return nil
}

// LoginAuthReplyValidationError is the validation error returned by
// LoginAuthReply.Validate if the designated constraints aren't met.
type LoginAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginAuthReplyValidationError) ErrorName() string { return "LoginAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginAuthReplyValidationError{}

// Validate checks the field values on RefreshTokenAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RefreshTokenAuthRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RefreshTokenAuthRequestValidationError is the validation error returned by
// RefreshTokenAuthRequest.Validate if the designated constraints aren't met.
type RefreshTokenAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenAuthRequestValidationError) ErrorName() string {
	return "RefreshTokenAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenAuthRequestValidationError{}

// Validate checks the field values on RefreshTokenAuthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RefreshTokenAuthReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RefreshTokenAuthReplyValidationError is the validation error returned by
// RefreshTokenAuthReply.Validate if the designated constraints aren't met.
type RefreshTokenAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenAuthReplyValidationError) ErrorName() string {
	return "RefreshTokenAuthReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenAuthReplyValidationError{}

// Validate checks the field values on PasswordlessTokenAuthRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PasswordlessTokenAuthRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PasswordlessTokenAuthRequestValidationError is the validation error returned
// by PasswordlessTokenAuthRequest.Validate if the designated constraints
// aren't met.
type PasswordlessTokenAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordlessTokenAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordlessTokenAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordlessTokenAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordlessTokenAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordlessTokenAuthRequestValidationError) ErrorName() string {
	return "PasswordlessTokenAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordlessTokenAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordlessTokenAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordlessTokenAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordlessTokenAuthRequestValidationError{}

// Validate checks the field values on PasswordlessTokenAuthReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PasswordlessTokenAuthReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PasswordlessTokenAuthReplyValidationError is the validation error returned
// by PasswordlessTokenAuthReply.Validate if the designated constraints aren't met.
type PasswordlessTokenAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordlessTokenAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordlessTokenAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordlessTokenAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordlessTokenAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordlessTokenAuthReplyValidationError) ErrorName() string {
	return "PasswordlessTokenAuthReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordlessTokenAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordlessTokenAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordlessTokenAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordlessTokenAuthReplyValidationError{}

// Validate checks the field values on LoginPasswordlessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginPasswordlessRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// LoginPasswordlessRequestValidationError is the validation error returned by
// LoginPasswordlessRequest.Validate if the designated constraints aren't met.
type LoginPasswordlessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginPasswordlessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginPasswordlessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginPasswordlessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginPasswordlessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginPasswordlessRequestValidationError) ErrorName() string {
	return "LoginPasswordlessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginPasswordlessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginPasswordlessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginPasswordlessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginPasswordlessRequestValidationError{}

// Validate checks the field values on LoginPasswordlessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginPasswordlessReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// LoginPasswordlessReplyValidationError is the validation error returned by
// LoginPasswordlessReply.Validate if the designated constraints aren't met.
type LoginPasswordlessReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginPasswordlessReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginPasswordlessReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginPasswordlessReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginPasswordlessReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginPasswordlessReplyValidationError) ErrorName() string {
	return "LoginPasswordlessReplyValidationError"
}

// Error satisfies the builtin error interface
func (e LoginPasswordlessReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginPasswordlessReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginPasswordlessReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginPasswordlessReplyValidationError{}

// Validate checks the field values on ForgetPasswordTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ForgetPasswordTokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ForgetPasswordTokenRequestValidationError is the validation error returned
// by ForgetPasswordTokenRequest.Validate if the designated constraints aren't met.
type ForgetPasswordTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgetPasswordTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgetPasswordTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgetPasswordTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgetPasswordTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgetPasswordTokenRequestValidationError) ErrorName() string {
	return "ForgetPasswordTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForgetPasswordTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgetPasswordTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgetPasswordTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgetPasswordTokenRequestValidationError{}

// Validate checks the field values on ForgetPasswordTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ForgetPasswordTokenReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ForgetPasswordTokenReplyValidationError is the validation error returned by
// ForgetPasswordTokenReply.Validate if the designated constraints aren't met.
type ForgetPasswordTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgetPasswordTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgetPasswordTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgetPasswordTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgetPasswordTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgetPasswordTokenReplyValidationError) ErrorName() string {
	return "ForgetPasswordTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ForgetPasswordTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgetPasswordTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgetPasswordTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgetPasswordTokenReplyValidationError{}

// Validate checks the field values on ForgetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ForgetPasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ForgetPasswordRequestValidationError is the validation error returned by
// ForgetPasswordRequest.Validate if the designated constraints aren't met.
type ForgetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgetPasswordRequestValidationError) ErrorName() string {
	return "ForgetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForgetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgetPasswordRequestValidationError{}

// Validate checks the field values on ForgetPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ForgetPasswordReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ForgetPasswordReplyValidationError is the validation error returned by
// ForgetPasswordReply.Validate if the designated constraints aren't met.
type ForgetPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgetPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgetPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgetPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgetPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgetPasswordReplyValidationError) ErrorName() string {
	return "ForgetPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ForgetPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgetPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgetPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgetPasswordReplyValidationError{}
