// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AuthWebHTTPServer interface {
	GetWebLoginForm(context.Context, *GetLoginFormRequest) (*GetLoginFormResponse, error)
	WebLogin(context.Context, *LoginAuthRequest) (*LoginAuthReply, error)
}

func RegisterAuthWebHTTPServer(s *http.Server, srv AuthWebHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/auth/web/login", _AuthWeb_GetWebLoginForm0_HTTP_Handler(srv))
	r.POST("/v1/auth/web/login", _AuthWeb_WebLogin0_HTTP_Handler(srv))
}

func _AuthWeb_GetWebLoginForm0_HTTP_Handler(srv AuthWebHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLoginFormRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.auth.v1.AuthWeb/GetWebLoginForm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWebLoginForm(ctx, req.(*GetLoginFormRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLoginFormResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthWeb_WebLogin0_HTTP_Handler(srv AuthWebHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginAuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.auth.v1.AuthWeb/WebLogin")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WebLogin(ctx, req.(*LoginAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginAuthReply)
		return ctx.Result(200, reply)
	}
}

type AuthWebHTTPClient interface {
	GetWebLoginForm(ctx context.Context, req *GetLoginFormRequest, opts ...http.CallOption) (rsp *GetLoginFormResponse, err error)
	WebLogin(ctx context.Context, req *LoginAuthRequest, opts ...http.CallOption) (rsp *LoginAuthReply, err error)
}

type AuthWebHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthWebHTTPClient(client *http.Client) AuthWebHTTPClient {
	return &AuthWebHTTPClientImpl{client}
}

func (c *AuthWebHTTPClientImpl) GetWebLoginForm(ctx context.Context, in *GetLoginFormRequest, opts ...http.CallOption) (*GetLoginFormResponse, error) {
	var out GetLoginFormResponse
	pattern := "/v1/auth/web/login"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/user.api.auth.v1.AuthWeb/GetWebLoginForm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthWebHTTPClientImpl) WebLogin(ctx context.Context, in *LoginAuthRequest, opts ...http.CallOption) (*LoginAuthReply, error) {
	var out LoginAuthReply
	pattern := "/v1/auth/web/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.api.auth.v1.AuthWeb/WebLogin"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
