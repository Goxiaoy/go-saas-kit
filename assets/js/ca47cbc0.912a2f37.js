"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7488],{6723:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var t=i(1527),r=i(4744);const o={sidebar_label:"Architecture",title:"Architecture"},s=void 0,c={id:"intro/architecture",title:"Architecture",description:"---",source:"@site/docs/01-intro/02-architecture.mdx",sourceDirName:"01-intro",slug:"/intro/architecture",permalink:"/kit/docs/intro/architecture",draft:!1,unlisted:!1,editUrl:"https://github.com/go-saas/kit/tree/main/docs/docs/01-intro/02-architecture.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Architecture",title:"Architecture"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/kit/docs/intro/overview"},next:{title:"Frontend",permalink:"/kit/docs/intro/frontend"}},a={},d=[{value:"Minimal Service Module",id:"minimal-service-module",level:3},{value:"Monolithic",id:"monolithic",level:3},{value:"Microservice",id:"microservice",level:3}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h3:"h3",hr:"hr",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("img",{src:"/kit/img/go-saas-kit.drawio.png",alt:"architecture",width:"800px"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"In order to understand the entire architecture, it is necessary to begin by comprehending the smaller components."})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"minimal-service-module",children:"Minimal Service Module"}),"\n",(0,t.jsx)("img",{src:"/kit/img/minimal-module-design.drawio.png",alt:"minimal",width:"800px"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Api:"})," ",(0,t.jsx)(n.a,{href:"../learn/fundamentals/protobuf",children:"Protobuf"})," definition for public/internal service and models. Extra: define permissions in ",(0,t.jsx)(n.a,{href:"../learn/fundamentals/authorization#ACL",children:"ACL"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Event:"})," Protobuf definition for distributed event bus"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Biz:"})," Domain layer, definition for all entities and repository interface"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Service:"})," Business logic, depends on biz repository interface"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Data:"})," Data access layer, implement biz repository interface, init databases( mysql ,redis), init event bus (kafka ), expose migration function"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Conf:"})," Protobuf configuration definition"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Server:"})," Set up http and grpc server. register all services, set up middlewares. set up distributed event and job handler, seeding behavior"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Host:"})," Process entry point, read configuration, set up tracing, logging. Usually the ",(0,t.jsx)(n.code,{children:"cmd"})," folder"]}),"\n",(0,t.jsx)(n.p,{children:"You may also see some other folders that not being listed:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"I18n:"})," Define localization resources"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Menu:"})," Define menu resources for ",(0,t.jsx)(n.a,{href:"./frontend#Admin-UI",children:"Admin-UI"})]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You may find some concepts to be different from ",(0,t.jsx)(n.a,{href:"https://github.com/go-kratos/kratos",children:"Kratos"})," when using go-saas-kit; consider this as the reference."]})}),"\n",(0,t.jsx)(n.p,{children:"Now that you have understood the layered composition, you can begin designing the division of business domains into different modules."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["How to divide different domain modules is a challenging question, and the answer often relies on experience, much like when to split microservices. Each choice has its pros and cons. After division, you may not be able to use the same database transaction, and you may need to use RPC calls instead of local functions (although go-saas-kit has ",(0,t.jsx)(n.a,{href:"../learn/fundamentals/protobuf#protoc-gen-go-grpc-proxy",children:"tools"})," to abstract some of these differences). However, when involving different development teams, dividing domain modules can make it more convenient for each team to iterate agilely."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"monolithic",children:"Monolithic"}),"\n",(0,t.jsx)("img",{src:"/kit/img/monolithic.drawio.png",alt:"minimal",width:"600px"}),"\n",(0,t.jsxs)(n.p,{children:["You can combine different private modules hosted in the same process by using ",(0,t.jsx)(n.a,{href:"../learn/fundamentals/di",children:"dependency injection"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"microservice",children:"Microservice"}),"\n",(0,t.jsx)("img",{src:"/kit/img/microservice.drawio.png",alt:"minimal",width:"600px"}),"\n",(0,t.jsx)(n.p,{children:"You can containerize different processes and communicate through distributed messaging or Remote Procedure Call(RPC)."})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},4744:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>s});var t=i(959);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);